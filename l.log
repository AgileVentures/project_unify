starting app on http://localhost:9999
Using the default profile...
Feature: Ping
  I want to ping the service and get a response back in different formats

  Scenario: Returning a JSON response        # features/api/v0/ping.feature:4
    Given: The API is running
    When the Accept Type is application/json # features/step_definitions/rest_steps.rb:6
    And the client requests GET /api/v0/ping # features/step_definitions/rest_steps.rb:10
    Then a "200" status code is returned     # features/step_definitions/rest_steps.rb:14
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="utf-8" />
        <title>Action Controller: Exception caught</title>
        <style>
          body {
            background-color: #FAFAFA;
            color: #333;
            margin: 0px;
          }

          body, p, ol, ul, td {
            font-family: helvetica, verdana, arial, sans-serif;
            font-size:   13px;
            line-height: 18px;
          }

          pre {
            font-size: 11px;
            white-space: pre-wrap;
          }

          pre.box {
            border: 1px solid #EEE;
            padding: 10px;
            margin: 0px;
            width: 958px;
          }

          header {
            color: #F0F0F0;
            background: #C52F24;
            padding: 0.5em 1.5em;
          }

          h1 {
            margin: 0.2em 0;
            line-height: 1.1em;
            font-size: 2em;
          }

          h2 {
            color: #C52F24;
            line-height: 25px;
          }

          .details {
            border: 1px solid #D0D0D0;
            border-radius: 4px;
            margin: 1em 0px;
            display: block;
            width: 978px;
          }

          .summary {
            padding: 8px 15px;
            border-bottom: 1px solid #D0D0D0;
            display: block;
          }

          .details pre {
            margin: 5px;
            border: none;
          }

          #container {
            box-sizing: border-box;
            width: 100%;
            padding: 0 1.5em;
          }

          .source * {
            margin: 0px;
            padding: 0px;
          }

          .source {
            border: 1px solid #D9D9D9;
            background: #ECECEC;
            width: 978px;
          }

          .source pre {
            padding: 10px 0px;
            border: none;
          }

          .source .data {
            font-size: 80%;
            overflow: auto;
            background-color: #FFF;
          }

          .info {
            padding: 0.5em;
          }

          .source .data .line_numbers {
            background-color: #ECECEC;
            color: #AAA;
            padding: 1em .5em;
            border-right: 1px solid #DDD;
            text-align: right;
          }

          .line {
            padding-left: 10px;
          }

          .line:hover {
            background-color: #F6F6F6;
          }

          .line.active {
            background-color: #FFCCCC;
          }

          .hidden {
            display: none;
          }

          a { color: #980905; }
          a:visited { color: #666; }
          a.trace-frames { color: #666; }
          a:hover { color: #C52F24; }
          a.trace-frames.selected { color: #C52F24 }

          
        </style>

        <script>
          var toggle = function(id) {
            var s = document.getElementById(id).style;
            s.display = s.display == 'none' ? 'block' : 'none';
            return false;
          }
          var show = function(id) {
            document.getElementById(id).style.display = 'block';
          }
          var hide = function(id) {
            document.getElementById(id).style.display = 'none';
          }
          var toggleTrace = function() {
            return toggle('blame_trace');
          }
          var toggleSessionDump = function() {
            return toggle('session_dump');
          }
          var toggleEnvDump = function() {
            return toggle('env_dump');
          }
        </script>
      </head>
      <body>

      <header>
        <h1>
          ActiveRecord::PendingMigrationError
        </h1>
      </header>

      <div id="container">
        <h2>

      Migrations are pending. To resolve this issue, run:

      	bin/rake db:migrate RAILS_ENV=development

      </h2>

            <div class="source " id="frame-source-0">
            <div class="info">
              Extracted source (around line <strong>#392</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>390</span>
      <span>391</span>
      <span>392</span>
      <span>393</span>
      <span>394</span>
      <span>395</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">      def check_pending!(connection = Base.connection)
      </div><div class="line active">        raise ActiveRecord::PendingMigrationError if ActiveRecord::Migrator.needs_migration?(connection)
      </div><div class="line">      end
      </div><div class="line">
      </div><div class="line">      def load_schema_if_pending!
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-1">
            <div class="info">
              Extracted source (around line <strong>#373</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>371</span>
      <span>372</span>
      <span>373</span>
      <span>374</span>
      <span>375</span>
      <span>376</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">          mtime = ActiveRecord::Migrator.last_migration.mtime.to_i
      </div><div class="line">          if @last_check &lt; mtime
      </div><div class="line active">            ActiveRecord::Migration.check_pending!(connection)
      </div><div class="line">            @last_check = mtime
      </div><div class="line">          end
      </div><div class="line">        end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-2">
            <div class="info">
              Extracted source (around line <strong>#29</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>27</span>
      <span>28</span>
      <span>29</span>
      <span>30</span>
      <span>31</span>
      <span>32</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">      result = run_callbacks :call do
      </div><div class="line">        begin
      </div><div class="line active">          @app.call(env)
      </div><div class="line">        rescue =&gt; error
      </div><div class="line">        end
      </div><div class="line">      end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-3">
            <div class="info">
              Extracted source (around line <strong>#88</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>86</span>
      <span>87</span>
      <span>88</span>
      <span>89</span>
      <span>90</span>
      <span>91</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    def __run_callbacks__(callbacks, &amp;block)
      </div><div class="line">      if callbacks.empty?
      </div><div class="line active">        yield if block_given?
      </div><div class="line">      else
      </div><div class="line">        runner = callbacks.compile
      </div><div class="line">        e = Filters::Environment.new(self, false, nil, block)
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-4">
            <div class="info">
              Extracted source (around line <strong>#778</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>776</span>
      <span>777</span>
      <span>778</span>
      <span>779</span>
      <span>780</span>
      <span>781</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">          module_eval &lt;&lt;-RUBY, __FILE__, __LINE__ + 1
      </div><div class="line">            def _run_#{name}_callbacks(&amp;block)
      </div><div class="line active">              __run_callbacks__(_#{name}_callbacks, &amp;block)
      </div><div class="line">            end
      </div><div class="line">          RUBY
      </div><div class="line">        end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-5">
            <div class="info">
              Extracted source (around line <strong>#81</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>79</span>
      <span>80</span>
      <span>81</span>
      <span>82</span>
      <span>83</span>
      <span>84</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    #   end
      </div><div class="line">    def run_callbacks(kind, &amp;block)
      </div><div class="line active">      send &quot;_run_#{kind}_callbacks&quot;, &amp;block
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    private
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-6">
            <div class="info">
              Extracted source (around line <strong>#27</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>25</span>
      <span>26</span>
      <span>27</span>
      <span>28</span>
      <span>29</span>
      <span>30</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    def call(env)
      </div><div class="line">      error = nil
      </div><div class="line active">      result = run_callbacks :call do
      </div><div class="line">        begin
      </div><div class="line">          @app.call(env)
      </div><div class="line">        rescue =&gt; error
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-7">
            <div class="info">
              Extracted source (around line <strong>#73</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>71</span>
      <span>72</span>
      <span>73</span>
      <span>74</span>
      <span>75</span>
      <span>76</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">      prepare!
      </div><div class="line">
      </div><div class="line active">      response = @app.call(env)
      </div><div class="line">      response[2] = ::Rack::BodyProxy.new(response[2]) { cleanup! }
      </div><div class="line">
      </div><div class="line">      response
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-8">
            <div class="info">
              Extracted source (around line <strong>#78</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>76</span>
      <span>77</span>
      <span>78</span>
      <span>79</span>
      <span>80</span>
      <span>81</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    def call(env)
      </div><div class="line">      env[&quot;action_dispatch.remote_ip&quot;] = GetIp.new(env, self)
      </div><div class="line active">      @app.call(env)
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    # The GetIp class exists as a way to defer processing of the request data
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-9">
            <div class="info">
              Extracted source (around line <strong>#17</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>15</span>
      <span>16</span>
      <span>17</span>
      <span>18</span>
      <span>19</span>
      <span>20</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def call(env)
      </div><div class="line active">      _, headers, body = response = @app.call(env)
      </div><div class="line">
      </div><div class="line">      if headers[&#39;X-Cascade&#39;] == &#39;pass&#39;
      </div><div class="line">        body.close if body.respond_to?(:close)
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-10">
            <div class="info">
              Extracted source (around line <strong>#28</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>26</span>
      <span>27</span>
      <span>28</span>
      <span>29</span>
      <span>30</span>
      <span>31</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">        end
      </div><div class="line">
      </div><div class="line active">        status, headers, body = @app.call(env)
      </div><div class="line">
      </div><div class="line">        if exception = env[&#39;web_console.exception&#39;]
      </div><div class="line">          session = Session.from_exception(exception)
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-11">
            <div class="info">
              Extracted source (around line <strong>#18</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>16</span>
      <span>17</span>
      <span>18</span>
      <span>19</span>
      <span>20</span>
      <span>21</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def call(env)
      </div><div class="line active">      app_exception = catch :app_exception do
      </div><div class="line">        request = create_regular_or_whiny_request(env)
      </div><div class="line">        return @app.call(env) unless request.from_whitelited_ip?
      </div><div class="line">
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-12">
            <div class="info">
              Extracted source (around line <strong>#18</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>16</span>
      <span>17</span>
      <span>18</span>
      <span>19</span>
      <span>20</span>
      <span>21</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def call(env)
      </div><div class="line active">      app_exception = catch :app_exception do
      </div><div class="line">        request = create_regular_or_whiny_request(env)
      </div><div class="line">        return @app.call(env) unless request.from_whitelited_ip?
      </div><div class="line">
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-13">
            <div class="info">
              Extracted source (around line <strong>#30</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>28</span>
      <span>29</span>
      <span>30</span>
      <span>31</span>
      <span>32</span>
      <span>33</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def call(env)
      </div><div class="line active">      @app.call(env)
      </div><div class="line">    rescue Exception =&gt; exception
      </div><div class="line">      if env[&#39;action_dispatch.show_exceptions&#39;] == false
      </div><div class="line">        raise exception
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-14">
            <div class="info">
              Extracted source (around line <strong>#38</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>36</span>
      <span>37</span>
      <span>38</span>
      <span>39</span>
      <span>40</span>
      <span>41</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">        instrumenter.start &#39;request.action_dispatch&#39;, request: request
      </div><div class="line">        logger.info { started_request_message(request) }
      </div><div class="line active">        resp = @app.call(env)
      </div><div class="line">        resp[2] = ::Rack::BodyProxy.new(resp[2]) { finish(request) }
      </div><div class="line">        resp
      </div><div class="line">      rescue Exception
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-15">
            <div class="info">
              Extracted source (around line <strong>#20</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>18</span>
      <span>19</span>
      <span>20</span>
      <span>21</span>
      <span>22</span>
      <span>23</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">        if logger.respond_to?(:tagged)
      </div><div class="line active">          logger.tagged(compute_tags(request)) { call_app(request, env) }
      </div><div class="line">        else
      </div><div class="line">          call_app(request, env)
      </div><div class="line">        end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-16">
            <div class="info">
              Extracted source (around line <strong>#68</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>66</span>
      <span>67</span>
      <span>68</span>
      <span>69</span>
      <span>70</span>
      <span>71</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def tagged(*tags)
      </div><div class="line active">      formatter.tagged(*tags) { yield self }
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    def flush
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-17">
            <div class="info">
              Extracted source (around line <strong>#26</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>24</span>
      <span>25</span>
      <span>26</span>
      <span>27</span>
      <span>28</span>
      <span>29</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">      def tagged(*tags)
      </div><div class="line">        new_tags = push_tags(*tags)
      </div><div class="line active">        yield self
      </div><div class="line">      ensure
      </div><div class="line">        pop_tags(new_tags.size)
      </div><div class="line">      end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-18">
            <div class="info">
              Extracted source (around line <strong>#68</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>66</span>
      <span>67</span>
      <span>68</span>
      <span>69</span>
      <span>70</span>
      <span>71</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def tagged(*tags)
      </div><div class="line active">      formatter.tagged(*tags) { yield self }
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    def flush
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-19">
            <div class="info">
              Extracted source (around line <strong>#20</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>18</span>
      <span>19</span>
      <span>20</span>
      <span>21</span>
      <span>22</span>
      <span>23</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">        if logger.respond_to?(:tagged)
      </div><div class="line active">          logger.tagged(compute_tags(request)) { call_app(request, env) }
      </div><div class="line">        else
      </div><div class="line">          call_app(request, env)
      </div><div class="line">        end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-20">
            <div class="info">
              Extracted source (around line <strong>#21</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>19</span>
      <span>20</span>
      <span>21</span>
      <span>22</span>
      <span>23</span>
      <span>24</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    def call(env)
      </div><div class="line">      env[&quot;action_dispatch.request_id&quot;] = external_request_id(env) || internal_request_id
      </div><div class="line active">      @app.call(env).tap { |_status, headers, _body| headers[&quot;X-Request-Id&quot;] = env[&quot;action_dispatch.request_id&quot;] }
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    private
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-21">
            <div class="info">
              Extracted source (around line <strong>#22</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>20</span>
      <span>21</span>
      <span>22</span>
      <span>23</span>
      <span>24</span>
      <span>25</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">      end
      </div><div class="line">
      </div><div class="line active">      @app.call(env)
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    def method_override(env)
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-22">
            <div class="info">
              Extracted source (around line <strong>#18</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>16</span>
      <span>17</span>
      <span>18</span>
      <span>19</span>
      <span>20</span>
      <span>21</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    def call(env)
      </div><div class="line">      start_time = clock_time
      </div><div class="line active">      status, headers, body = @app.call(env)
      </div><div class="line">      request_time = clock_time - start_time
      </div><div class="line">
      </div><div class="line">      if !headers.has_key?(@header_name)
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-23">
            <div class="info">
              Extracted source (around line <strong>#28</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>26</span>
      <span>27</span>
      <span>28</span>
      <span>29</span>
      <span>30</span>
      <span>31</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">          def call(env)
      </div><div class="line">            LocalCacheRegistry.set_cache_for(local_cache_key, LocalStore.new)
      </div><div class="line active">            response = @app.call(env)
      </div><div class="line">            response[2] = ::Rack::BodyProxy.new(response[2]) do
      </div><div class="line">              LocalCacheRegistry.set_cache_for(local_cache_key, nil)
      </div><div class="line">            end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-24">
            <div class="info">
              Extracted source (around line <strong>#17</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>15</span>
      <span>16</span>
      <span>17</span>
      <span>18</span>
      <span>19</span>
      <span>20</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">      old, env[FLAG] = env[FLAG], false
      </div><div class="line">      @mutex.lock
      </div><div class="line active">      response = @app.call(env)
      </div><div class="line">      body = BodyProxy.new(response[2]) { @mutex.unlock }
      </div><div class="line">      response[2] = body
      </div><div class="line">      response
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-25">
            <div class="info">
              Extracted source (around line <strong>#116</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>114</span>
      <span>115</span>
      <span>116</span>
      <span>117</span>
      <span>118</span>
      <span>119</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">      end
      </div><div class="line">
      </div><div class="line active">      @app.call(env)
      </div><div class="line">    end
      </div><div class="line">  end
      </div><div class="line">end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-26">
            <div class="info">
              Extracted source (around line <strong>#113</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>111</span>
      <span>112</span>
      <span>113</span>
      <span>114</span>
      <span>115</span>
      <span>116</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def call(env)
      </div><div class="line active">      status, headers, body = @app.call(env)
      </div><div class="line">      if body.respond_to?(:to_path)
      </div><div class="line">        case type = variation(env)
      </div><div class="line">        when &#39;X-Accel-Redirect&#39;
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-27">
            <div class="info">
              Extracted source (around line <strong>#518</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>516</span>
      <span>517</span>
      <span>518</span>
      <span>519</span>
      <span>520</span>
      <span>521</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">        env[&quot;ROUTES_#{routes.object_id}_SCRIPT_NAME&quot;] = env[&#39;SCRIPT_NAME&#39;].dup
      </div><div class="line">      end
      </div><div class="line active">      app.call(env)
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    # Defines additional Rack env configuration that is added on each call.
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-28">
            <div class="info">
              Extracted source (around line <strong>#165</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>163</span>
      <span>164</span>
      <span>165</span>
      <span>166</span>
      <span>167</span>
      <span>168</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">      env[&quot;ORIGINAL_FULLPATH&quot;] = build_original_fullpath(env)
      </div><div class="line">      env[&quot;ORIGINAL_SCRIPT_NAME&quot;] = env[&quot;SCRIPT_NAME&quot;]
      </div><div class="line active">      super(env)
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    # Reload application routes regardless if they changed or not.
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-29">
            <div class="info">
              Extracted source (around line <strong>#15</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>13</span>
      <span>14</span>
      <span>15</span>
      <span>16</span>
      <span>17</span>
      <span>18</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    def call(env)
      </div><div class="line">      env[&#39;rack.tempfiles&#39;] ||= []
      </div><div class="line active">      status, headers, body = @app.call(env)
      </div><div class="line">      body_proxy = BodyProxy.new(body) do
      </div><div class="line">        env[&#39;rack.tempfiles&#39;].each { |f| f.close! } unless env[&#39;rack.tempfiles&#39;].nil?
      </div><div class="line">      end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-30">
            <div class="info">
              Extracted source (around line <strong>#49</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>47</span>
      <span>48</span>
      <span>49</span>
      <span>50</span>
      <span>51</span>
      <span>52</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">      ## and returns an Array of exactly three values:
      </div><div class="line active">      status, headers, @body = @app.call(env)
      </div><div class="line">      ## The *status*,
      </div><div class="line">      check_status status
      </div><div class="line">      ## the *headers*,
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-31">
            <div class="info">
              Extracted source (around line <strong>#37</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>35</span>
      <span>36</span>
      <span>37</span>
      <span>38</span>
      <span>39</span>
      <span>40</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    ## responds to +call+.
      </div><div class="line">    def call(env=nil)
      </div><div class="line active">      dup._call(env)
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    def _call(env)
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-32">
            <div class="info">
              Extracted source (around line <strong>#24</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>22</span>
      <span>23</span>
      <span>24</span>
      <span>25</span>
      <span>26</span>
      <span>27</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def call(env)
      </div><div class="line active">      @app.call(env)
      </div><div class="line">    rescue StandardError, LoadError, SyntaxError =&gt; e
      </div><div class="line">      exception_string = dump_exception(e)
      </div><div class="line">
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-33">
            <div class="info">
              Extracted source (around line <strong>#33</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>31</span>
      <span>32</span>
      <span>33</span>
      <span>34</span>
      <span>35</span>
      <span>36</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    def call(env)
      </div><div class="line">      began_at = Time.now
      </div><div class="line active">      status, header, body = @app.call(env)
      </div><div class="line">      header = Utils::HeaderHash.new(header)
      </div><div class="line">      body = BodyProxy.new(body) { log(env, status, header, began_at) }
      </div><div class="line">      [status, header, body]
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-34">
            <div class="info">
              Extracted source (around line <strong>#54</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>52</span>
      <span>53</span>
      <span>54</span>
      <span>55</span>
      <span>56</span>
      <span>57</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def call(env)
      </div><div class="line active">      status, headers, body = @app.call(env)
      </div><div class="line">      headers = HeaderHash.new(headers)
      </div><div class="line">
      </div><div class="line">      if ! chunkable_version?(env[&#39;HTTP_VERSION&#39;]) ||
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-35">
            <div class="info">
              Extracted source (around line <strong>#15</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>13</span>
      <span>14</span>
      <span>15</span>
      <span>16</span>
      <span>17</span>
      <span>18</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def call(env)
      </div><div class="line active">      status, headers, body = @app.call(env)
      </div><div class="line">      headers = HeaderHash.new(headers)
      </div><div class="line">
      </div><div class="line">      if !STATUS_WITH_NO_ENTITY_BODY.include?(status.to_i) &amp;&amp;
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-36">
            <div class="info">
              Extracted source (around line <strong>#88</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>86</span>
      <span>87</span>
      <span>88</span>
      <span>89</span>
      <span>90</span>
      <span>91</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">        env[&quot;REQUEST_PATH&quot;] ||= [env[&quot;SCRIPT_NAME&quot;], env[PATH_INFO]].join
      </div><div class="line">
      </div><div class="line active">        status, headers, body = @app.call(env)
      </div><div class="line">        begin
      </div><div class="line">          res.status = status.to_i
      </div><div class="line">          headers.each { |k, vs|
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-37">
            <div class="info">
              Extracted source (around line <strong>#140</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>138</span>
      <span>139</span>
      <span>140</span>
      <span>141</span>
      <span>142</span>
      <span>143</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">      si = servlet.get_instance(self, *options)
      </div><div class="line">      @logger.debug(format(&quot;%s is invoked.&quot;, si.class.name))
      </div><div class="line active">      si.service(req, res)
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    ##
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-38">
            <div class="info">
              Extracted source (around line <strong>#96</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>94</span>
      <span>95</span>
      <span>96</span>
      <span>97</span>
      <span>98</span>
      <span>99</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">            callback.call(req, res)
      </div><div class="line">          end
      </div><div class="line active">          server.service(req, res)
      </div><div class="line">        rescue HTTPStatus::EOFError, HTTPStatus::RequestTimeout =&gt; ex
      </div><div class="line">          res.set_error(ex)
      </div><div class="line">        rescue HTTPStatus::Error =&gt; ex
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-39">
            <div class="info">
              Extracted source (around line <strong>#296</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>294</span>
      <span>295</span>
      <span>296</span>
      <span>297</span>
      <span>298</span>
      <span>299</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">          end
      </div><div class="line">          call_callback(:AcceptCallback, sock)
      </div><div class="line active">          block ? block.call(sock) : run(sock)
      </div><div class="line">        rescue Errno::ENOTCONN
      </div><div class="line">          @logger.debug &quot;Errno::ENOTCONN raised&quot;
      </div><div class="line">        rescue ServerError =&gt; ex
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>

        
      <p><code>Rails.root: /Users/tony/OneDrive/Documents/Development/refugee/project_unify</code></p>

      <div id="traces">
          <a href="#" onclick="hide(&#39;Framework-Trace&#39;);hide(&#39;Full-Trace&#39;);show(&#39;Application-Trace&#39;);; return false;">Application Trace</a> |
          <a href="#" onclick="hide(&#39;Application-Trace&#39;);hide(&#39;Full-Trace&#39;);show(&#39;Framework-Trace&#39;);; return false;">Framework Trace</a> |
          <a href="#" onclick="hide(&#39;Application-Trace&#39;);hide(&#39;Framework-Trace&#39;);show(&#39;Full-Trace&#39;);; return false;">Full Trace</a> 

          <div id="Application-Trace" style="display: none;">
            <pre><code></code></pre>
          </div>
          <div id="Framework-Trace" style="display: none;">
            <pre><code><a class="trace-frames" data-frame-id="0" href="#">activerecord (4.2.4) lib/active_record/migration.rb:392:in `check_pending!&#39;</a><br><a class="trace-frames" data-frame-id="1" href="#">activerecord (4.2.4) lib/active_record/migration.rb:373:in `call&#39;</a><br><a class="trace-frames" data-frame-id="2" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/callbacks.rb:29:in `block in call&#39;</a><br><a class="trace-frames" data-frame-id="3" href="#">activesupport (4.2.4) lib/active_support/callbacks.rb:88:in `__run_callbacks__&#39;</a><br><a class="trace-frames" data-frame-id="4" href="#">activesupport (4.2.4) lib/active_support/callbacks.rb:778:in `_run_call_callbacks&#39;</a><br><a class="trace-frames" data-frame-id="5" href="#">activesupport (4.2.4) lib/active_support/callbacks.rb:81:in `run_callbacks&#39;</a><br><a class="trace-frames" data-frame-id="6" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/callbacks.rb:27:in `call&#39;</a><br><a class="trace-frames" data-frame-id="7" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/reloader.rb:73:in `call&#39;</a><br><a class="trace-frames" data-frame-id="8" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/remote_ip.rb:78:in `call&#39;</a><br><a class="trace-frames" data-frame-id="9" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/debug_exceptions.rb:17:in `call&#39;</a><br><a class="trace-frames" data-frame-id="10" href="#">web-console (2.3.0) lib/web_console/middleware.rb:28:in `block in call&#39;</a><br><a class="trace-frames" data-frame-id="11" href="#">web-console (2.3.0) lib/web_console/middleware.rb:18:in `catch&#39;</a><br><a class="trace-frames" data-frame-id="12" href="#">web-console (2.3.0) lib/web_console/middleware.rb:18:in `call&#39;</a><br><a class="trace-frames" data-frame-id="13" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call&#39;</a><br><a class="trace-frames" data-frame-id="14" href="#">railties (4.2.4) lib/rails/rack/logger.rb:38:in `call_app&#39;</a><br><a class="trace-frames" data-frame-id="15" href="#">railties (4.2.4) lib/rails/rack/logger.rb:20:in `block in call&#39;</a><br><a class="trace-frames" data-frame-id="16" href="#">activesupport (4.2.4) lib/active_support/tagged_logging.rb:68:in `block in tagged&#39;</a><br><a class="trace-frames" data-frame-id="17" href="#">activesupport (4.2.4) lib/active_support/tagged_logging.rb:26:in `tagged&#39;</a><br><a class="trace-frames" data-frame-id="18" href="#">activesupport (4.2.4) lib/active_support/tagged_logging.rb:68:in `tagged&#39;</a><br><a class="trace-frames" data-frame-id="19" href="#">railties (4.2.4) lib/rails/rack/logger.rb:20:in `call&#39;</a><br><a class="trace-frames" data-frame-id="20" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/request_id.rb:21:in `call&#39;</a><br><a class="trace-frames" data-frame-id="21" href="#">rack (1.6.4) lib/rack/methodoverride.rb:22:in `call&#39;</a><br><a class="trace-frames" data-frame-id="22" href="#">rack (1.6.4) lib/rack/runtime.rb:18:in `call&#39;</a><br><a class="trace-frames" data-frame-id="23" href="#">activesupport (4.2.4) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call&#39;</a><br><a class="trace-frames" data-frame-id="24" href="#">rack (1.6.4) lib/rack/lock.rb:17:in `call&#39;</a><br><a class="trace-frames" data-frame-id="25" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/static.rb:116:in `call&#39;</a><br><a class="trace-frames" data-frame-id="26" href="#">rack (1.6.4) lib/rack/sendfile.rb:113:in `call&#39;</a><br><a class="trace-frames" data-frame-id="27" href="#">railties (4.2.4) lib/rails/engine.rb:518:in `call&#39;</a><br><a class="trace-frames" data-frame-id="28" href="#">railties (4.2.4) lib/rails/application.rb:165:in `call&#39;</a><br><a class="trace-frames" data-frame-id="29" href="#">rack (1.6.4) lib/rack/tempfile_reaper.rb:15:in `call&#39;</a><br><a class="trace-frames" data-frame-id="30" href="#">rack (1.6.4) lib/rack/lint.rb:49:in `_call&#39;</a><br><a class="trace-frames" data-frame-id="31" href="#">rack (1.6.4) lib/rack/lint.rb:37:in `call&#39;</a><br><a class="trace-frames" data-frame-id="32" href="#">rack (1.6.4) lib/rack/showexceptions.rb:24:in `call&#39;</a><br><a class="trace-frames" data-frame-id="33" href="#">rack (1.6.4) lib/rack/commonlogger.rb:33:in `call&#39;</a><br><a class="trace-frames" data-frame-id="34" href="#">rack (1.6.4) lib/rack/chunked.rb:54:in `call&#39;</a><br><a class="trace-frames" data-frame-id="35" href="#">rack (1.6.4) lib/rack/content_length.rb:15:in `call&#39;</a><br><a class="trace-frames" data-frame-id="36" href="#">rack (1.6.4) lib/rack/handler/webrick.rb:88:in `service&#39;</a><br><a class="trace-frames" data-frame-id="37" href="#">/Users/tony/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/webrick/httpserver.rb:140:in `service&#39;</a><br><a class="trace-frames" data-frame-id="38" href="#">/Users/tony/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/webrick/httpserver.rb:96:in `run&#39;</a><br><a class="trace-frames" data-frame-id="39" href="#">/Users/tony/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/webrick/server.rb:296:in `block in start_thread&#39;</a><br></code></pre>
          </div>
          <div id="Full-Trace" style="display: block;">
            <pre><code><a class="trace-frames" data-frame-id="0" href="#">activerecord (4.2.4) lib/active_record/migration.rb:392:in `check_pending!&#39;</a><br><a class="trace-frames" data-frame-id="1" href="#">activerecord (4.2.4) lib/active_record/migration.rb:373:in `call&#39;</a><br><a class="trace-frames" data-frame-id="2" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/callbacks.rb:29:in `block in call&#39;</a><br><a class="trace-frames" data-frame-id="3" href="#">activesupport (4.2.4) lib/active_support/callbacks.rb:88:in `__run_callbacks__&#39;</a><br><a class="trace-frames" data-frame-id="4" href="#">activesupport (4.2.4) lib/active_support/callbacks.rb:778:in `_run_call_callbacks&#39;</a><br><a class="trace-frames" data-frame-id="5" href="#">activesupport (4.2.4) lib/active_support/callbacks.rb:81:in `run_callbacks&#39;</a><br><a class="trace-frames" data-frame-id="6" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/callbacks.rb:27:in `call&#39;</a><br><a class="trace-frames" data-frame-id="7" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/reloader.rb:73:in `call&#39;</a><br><a class="trace-frames" data-frame-id="8" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/remote_ip.rb:78:in `call&#39;</a><br><a class="trace-frames" data-frame-id="9" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/debug_exceptions.rb:17:in `call&#39;</a><br><a class="trace-frames" data-frame-id="10" href="#">web-console (2.3.0) lib/web_console/middleware.rb:28:in `block in call&#39;</a><br><a class="trace-frames" data-frame-id="11" href="#">web-console (2.3.0) lib/web_console/middleware.rb:18:in `catch&#39;</a><br><a class="trace-frames" data-frame-id="12" href="#">web-console (2.3.0) lib/web_console/middleware.rb:18:in `call&#39;</a><br><a class="trace-frames" data-frame-id="13" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call&#39;</a><br><a class="trace-frames" data-frame-id="14" href="#">railties (4.2.4) lib/rails/rack/logger.rb:38:in `call_app&#39;</a><br><a class="trace-frames" data-frame-id="15" href="#">railties (4.2.4) lib/rails/rack/logger.rb:20:in `block in call&#39;</a><br><a class="trace-frames" data-frame-id="16" href="#">activesupport (4.2.4) lib/active_support/tagged_logging.rb:68:in `block in tagged&#39;</a><br><a class="trace-frames" data-frame-id="17" href="#">activesupport (4.2.4) lib/active_support/tagged_logging.rb:26:in `tagged&#39;</a><br><a class="trace-frames" data-frame-id="18" href="#">activesupport (4.2.4) lib/active_support/tagged_logging.rb:68:in `tagged&#39;</a><br><a class="trace-frames" data-frame-id="19" href="#">railties (4.2.4) lib/rails/rack/logger.rb:20:in `call&#39;</a><br><a class="trace-frames" data-frame-id="20" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/request_id.rb:21:in `call&#39;</a><br><a class="trace-frames" data-frame-id="21" href="#">rack (1.6.4) lib/rack/methodoverride.rb:22:in `call&#39;</a><br><a class="trace-frames" data-frame-id="22" href="#">rack (1.6.4) lib/rack/runtime.rb:18:in `call&#39;</a><br><a class="trace-frames" data-frame-id="23" href="#">activesupport (4.2.4) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call&#39;</a><br><a class="trace-frames" data-frame-id="24" href="#">rack (1.6.4) lib/rack/lock.rb:17:in `call&#39;</a><br><a class="trace-frames" data-frame-id="25" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/static.rb:116:in `call&#39;</a><br><a class="trace-frames" data-frame-id="26" href="#">rack (1.6.4) lib/rack/sendfile.rb:113:in `call&#39;</a><br><a class="trace-frames" data-frame-id="27" href="#">railties (4.2.4) lib/rails/engine.rb:518:in `call&#39;</a><br><a class="trace-frames" data-frame-id="28" href="#">railties (4.2.4) lib/rails/application.rb:165:in `call&#39;</a><br><a class="trace-frames" data-frame-id="29" href="#">rack (1.6.4) lib/rack/tempfile_reaper.rb:15:in `call&#39;</a><br><a class="trace-frames" data-frame-id="30" href="#">rack (1.6.4) lib/rack/lint.rb:49:in `_call&#39;</a><br><a class="trace-frames" data-frame-id="31" href="#">rack (1.6.4) lib/rack/lint.rb:37:in `call&#39;</a><br><a class="trace-frames" data-frame-id="32" href="#">rack (1.6.4) lib/rack/showexceptions.rb:24:in `call&#39;</a><br><a class="trace-frames" data-frame-id="33" href="#">rack (1.6.4) lib/rack/commonlogger.rb:33:in `call&#39;</a><br><a class="trace-frames" data-frame-id="34" href="#">rack (1.6.4) lib/rack/chunked.rb:54:in `call&#39;</a><br><a class="trace-frames" data-frame-id="35" href="#">rack (1.6.4) lib/rack/content_length.rb:15:in `call&#39;</a><br><a class="trace-frames" data-frame-id="36" href="#">rack (1.6.4) lib/rack/handler/webrick.rb:88:in `service&#39;</a><br><a class="trace-frames" data-frame-id="37" href="#">/Users/tony/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/webrick/httpserver.rb:140:in `service&#39;</a><br><a class="trace-frames" data-frame-id="38" href="#">/Users/tony/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/webrick/httpserver.rb:96:in `run&#39;</a><br><a class="trace-frames" data-frame-id="39" href="#">/Users/tony/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/webrick/server.rb:296:in `block in start_thread&#39;</a><br></code></pre>
          </div>

        <script type="text/javascript">
          var traceFrames = document.getElementsByClassName('trace-frames');
          var selectedFrame, currentSource = document.getElementById('frame-source-0');

          // Add click listeners for all stack frames
          for (var i = 0; i < traceFrames.length; i++) {
            traceFrames[i].addEventListener('click', function(e) {
              e.preventDefault();
              var target = e.target;
              var frame_id = target.dataset.frameId;

              if (selectedFrame) {
                selectedFrame.className = selectedFrame.className.replace("selected", "");
              }

              target.className += " selected";
              selectedFrame = target;

              // Change the extracted source code
              changeSourceExtract(frame_id);
            });

            function changeSourceExtract(frame_id) {
              var el = document.getElementById('frame-source-' + frame_id);
              if (currentSource && el) {
                currentSource.className += " hidden";
                el.className = el.className.replace(" hidden", "");
                currentSource = el;
              }
            }
          }
        </script>
      </div>

        

      <h2 style="margin-top: 30px">Request</h2>
      <p><b>Parameters</b>:</p> <pre>None</pre>

      <div class="details">
        <div class="summary"><a href="#" onclick="return toggleSessionDump()">Toggle session dump</a></div>
        <div id="session_dump" style="display:none"><pre></pre></div>
      </div>

      <div class="details">
        <div class="summary"><a href="#" onclick="return toggleEnvDump()">Toggle env dump</a></div>
        <div id="env_dump" style="display:none"><pre>GATEWAY_INTERFACE: &quot;CGI/1.1&quot;
      HTTP_ACCEPT: &quot;application/json&quot;
      REMOTE_ADDR: &quot;::1&quot;
      REMOTE_HOST: &quot;::1&quot;
      SERVER_NAME: &quot;localhost&quot;
      SERVER_PROTOCOL: &quot;HTTP/1.1&quot;</pre></div>
      </div>

      <h2 style="margin-top: 30px">Response</h2>
      <p><b>Headers</b>:</p> <pre>None</pre>

      </div>


      <div id="console"
        data-mount-point='/__web_console'
        data-session-id='f1c2ed109e6fb3037c3d1a75eb442434'
        data-prompt-label='>> '>
      </div>


      <script type="text/javascript">
      (function() {
        /**
       * Constructor for command storage.
       * It uses localStorage if available. Otherwise fallback to normal JS array.
       */
      function CommandStorage() {
        this.previousCommands = [];
        var previousCommandOffset = 0;
        var hasLocalStorage = typeof window.localStorage !== 'undefined';
        var STORAGE_KEY = "web_console_previous_commands";
        var MAX_STORAGE = 100;

        if (hasLocalStorage) {
          this.previousCommands = JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];
          previousCommandOffset = this.previousCommands.length;
        }

        this.addCommand = function(command) {
          previousCommandOffset = this.previousCommands.push(command);

          if (previousCommandOffset > MAX_STORAGE) {
            this.previousCommands.splice(0, 1);
            previousCommandOffset = MAX_STORAGE;
          }

          if (hasLocalStorage) {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(this.previousCommands));
          }
        };

        this.navigate = function(offset) {
          previousCommandOffset += offset;

          if (previousCommandOffset < 0) {
            previousCommandOffset = -1;
            return null;
          }

          if (previousCommandOffset >= this.previousCommands.length) {
            previousCommandOffset = this.previousCommands.length;
            return null;
          }

          return this.previousCommands[previousCommandOffset];
        }
      }

      // HTML strings for dynamic elements.
      var consoleInnerHtml = "<div class=\'resizer layer\'><\/div>\n<div class=\'console-outer layer\'>\n  <div class=\'console-actions\'>\n    <div class=\'close-button button\' title=\'close\'>x<\/div>\n  <\/div>\n  <div class=\'console-inner\'><\/div>\n<\/div>\n<input class=\'clipboard\' type=\'text\'>\n"
      ;
      var promptBoxHtml = "<span class=\'console-prompt-label\'><\/span>\n<pre class=\'console-prompt-display\'><\/pre>\n"
      ;
      // CSS
      var consoleStyleCss = ".console .pos-absolute { position: absolute; }\n.console .pos-fixed { position: fixed; }\n.console .pos-right { right: 0; }\n.console .border-box { box-sizing: border-box; }\n.console .layer { width: 100%; height: 100%; }\n.console .layer.console-outer { z-index: 1; }\n.console .layer.resizer { z-index: 2; }\n.console { position: fixed; left: 0; bottom: 0; width: 100%; height: 148px; padding: 0; margin: 0; background: none repeat scroll 0% 0% #333; z-index: 9999; }\n.console .console-outer { overflow: auto; padding-top: 4px; }\n.console .console-inner { font-family: monospace; font-size: 11px; width: 100%; height: 100%; overflow: none; background: #333; }\n.console .console-prompt-box { color: #FFF; }\n.console .console-message { color: #1AD027; margin: 0; border: 0; white-space: pre-wrap; background-color: #333; padding: 0; }\n.console .console-message.error-message { color: #fc9; }\n.console .console-focus .console-cursor { background: #FEFEFE; color: #333; font-weight: bold; }\n.console .resizer { background: #333; width: 100%; height: 4px; cursor: ns-resize; }\n.console .console-actions { padding-right: 3px; }\n.console .console-actions .button { float: left; }\n.console .button { cursor: pointer; border-radius: 1px; font-family: monospace; font-size: 13px; width: 14px; height: 14px; line-height: 14px; text-align: center; color: #ccc; }\n.console .button:hover { background: #666; color: #fff; }\n.console .button.close-button:hover { background: #966; }\n.console .clipboard { height: 0px; padding: 0px; margin: 0px; width: 0px; margin-left: -1000px; }\n.console .console-prompt-label { display: inline; color: #FFF; background: none repeat scroll 0% 0% #333; border: 0; padding: 0; }\n.console .console-prompt-display { display: inline; color: #FFF; background: none repeat scroll 0% 0% #333; border: 0; padding: 0; }\n.console.full-screen { height: 100%; }\n.console.full-screen .console-outer { padding-top: 3px; }\n.console.full-screen .resizer { display: none; }\n.console.full-screen .close-button { display: none; }\n"
      ;
      // Insert a style element with the unique ID
      var styleElementId = 'sr02459pvbvrmhco';

      // REPLConsole Constructor
      function REPLConsole(config) {
        function getConfig(key, defaultValue) {
          return config && config[key] || defaultValue;
        }

        this.commandStorage = new CommandStorage();
        this.prompt = getConfig('promptLabel', ' >>');
        this.mountPoint = getConfig('mountPoint');
        this.sessionId = getConfig('sessionId');
      }

      REPLConsole.prototype.getSessionUrl = function(path) {
        var parts = [ this.mountPoint, 'repl_sessions', this.sessionId ];
        if (path) {
          parts.push(path);
        }
        // Join and remove duplicate slashes.
        return parts.join('/').replace(/([^:]\/)\/+/g, '$1');
      };

      REPLConsole.prototype.commandHandle = function(line, callback) {
        var self = this;
        var params = 'input=' + encodeURIComponent(line);
        callback = callback || function() {};

        function isSuccess(status) {
          return status >= 200 && status < 300 || status === 304;
        }

        function parseJSON(text) {
          try {
            return JSON.parse(text);
          } catch (e) {
            return null;
          }
        }

        function getErrorText(xhr) {
          if (!xhr.status) {
            return "Oops! Failed to connect to the Web Console middleware.\nPlease make sure a rails development server is running.\n";
          } else {
            return xhr.status + ' ' + xhr.statusText;
          }
        }

        putRequest(self.getSessionUrl(), params, function(xhr) {
          var response = parseJSON(xhr.responseText);
          var result   = isSuccess(xhr.status);
          if (result) {
            self.writeOutput(response.output);
          } else {
            if (response && response.output) {
              self.writeError(response.output);
            } else {
              self.writeError(getErrorText(xhr));
            }
          }
          callback(result, response);
        });
      };

      REPLConsole.prototype.uninstall = function() {
        this.container.parentNode.removeChild(this.container);
      };

      REPLConsole.prototype.install = function(container) {
        var _this = this;

        document.onkeydown = function(ev) {
          if (_this.focused) { _this.onKeyDown(ev); }
        };

        document.onkeypress = function(ev) {
          if (_this.focused) { _this.onKeyPress(ev); }
        };

        document.addEventListener('mousedown', function(ev) {
          var el = ev.target || ev.srcElement;

          if (el) {
            do {
              if (el === container) {
                _this.focus();
                return;
              }
            } while (el = el.parentNode);

            _this.blur();
          }
        });

        // Render the console.
        container.innerHTML = consoleInnerHtml;

        var consoleOuter = findChild(container, 'console-outer');
        var consoleActions = findChild(consoleOuter, 'console-actions');

        addClass(container, 'console');
        addClass(container.getElementsByClassName('layer'), 'pos-absolute border-box');
        addClass(container.getElementsByClassName('button'), 'border-box');
        addClass(consoleActions, 'pos-fixed pos-right');

        // Make the console resizable.
        function resizeContainer(ev) {
          var startY              = ev.clientY;
          var startHeight         = parseInt(document.defaultView.getComputedStyle(container).height, 10);
          var scrollTopStart      = consoleOuter.scrollTop;
          var clientHeightStart   = consoleOuter.clientHeight;

          var doDrag = function(e) {
            container.style.height = (startHeight + startY - e.clientY) + 'px';
            consoleOuter.scrollTop = scrollTopStart + (clientHeightStart - consoleOuter.clientHeight);
            shiftConsoleActions();
          };

          var stopDrag = function(e) {
            document.documentElement.removeEventListener('mousemove', doDrag, false);
            document.documentElement.removeEventListener('mouseup', stopDrag, false);
          };

          document.documentElement.addEventListener('mousemove', doDrag, false);
          document.documentElement.addEventListener('mouseup', stopDrag, false);
        }

        function closeContainer(ev) {
          container.parentNode.removeChild(container);
        }

        var shifted = false;
        function shiftConsoleActions() {
          if (consoleOuter.scrollHeight > consoleOuter.clientHeight) {
            var widthDiff = document.documentElement.clientWidth - consoleOuter.clientWidth;
            if (shifted || ! widthDiff) return;
            shifted = true;
            consoleActions.style.marginRight = widthDiff + 'px';
          } else if (shifted) {
            shifted = false;
            consoleActions.style.marginRight = '0px';
          }
        }

        // Initialize
        this.container = container;
        this.outer = consoleOuter;
        this.inner = findChild(this.outer, 'console-inner');
        this.clipboard = findChild(container, 'clipboard');
        this.newPromptBox();
        this.insertCss();

        findChild(container, 'resizer').addEventListener('mousedown', resizeContainer);
        findChild(consoleActions, 'close-button').addEventListener('click', closeContainer);
        consoleOuter.addEventListener('DOMNodeInserted', shiftConsoleActions);

        REPLConsole.currentSession = this;
      };

      // Add CSS styles dynamically. This probably doesnt work for IE <8.
      REPLConsole.prototype.insertCss = function() {
        if (document.getElementById(styleElementId)) {
          return; // already inserted
        }
        var style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = consoleStyleCss;
        style.id = styleElementId;
        document.getElementsByTagName('head')[0].appendChild(style);
      };

      REPLConsole.prototype.focus = function() {
        if (! this.focused) {
          this.focused = true;
          if (! hasClass(this.inner, "console-focus")) {
            addClass(this.inner, "console-focus");
          }
          this.scrollToBottom();
        }
      };

      REPLConsole.prototype.blur = function() {
        this.focused = false;
        removeClass(this.inner, "console-focus");
      };

      /**
       * Add a new empty prompt box to the console.
       */
      REPLConsole.prototype.newPromptBox = function() {
        // Remove the caret from previous prompt display if any.
        if (this.promptDisplay) {
          this.removeCaretFromPrompt();
        }

        var promptBox = document.createElement('div');
        promptBox.className = "console-prompt-box";
        promptBox.innerHTML = promptBoxHtml;
        this.promptLabel = promptBox.getElementsByClassName('console-prompt-label')[0];
        this.promptDisplay = promptBox.getElementsByClassName('console-prompt-display')[0];
        // Render the prompt box
        this.setInput("");
        this.promptLabel.innerHTML = this.prompt;
        this.inner.appendChild(promptBox);
        this.scrollToBottom();
      };

      /**
       * Remove the caret from the prompt box,
       * mainly before adding a new prompt box.
       * For simplicity, just re-render the prompt box
       * with caret position -1.
       */
      REPLConsole.prototype.removeCaretFromPrompt = function() {
        this.setInput(this._input, -1);
      };

      REPLConsole.prototype.setInput = function(input, caretPos) {
        this._caretPos = caretPos === undefined ? input.length : caretPos;
        this._input = input;
        this.renderInput();
      };

      /**
       * Add some text to the existing input.
       */
      REPLConsole.prototype.addToInput = function(val, caretPos) {
        caretPos = caretPos || this._caretPos;
        var before = this._input.substring(0, caretPos);
        var after = this._input.substring(caretPos, this._input.length);
        var newInput =  before + val + after;
        this.setInput(newInput, caretPos + val.length);
      };

      /**
       * Render the input prompt. This is called whenever
       * the user input changes, sometimes not very efficient.
       */
      REPLConsole.prototype.renderInput = function() {
        // Clear the current input.
        removeAllChildren(this.promptDisplay);

        var promptCursor = document.createElement('span');
        promptCursor.className = "console-cursor";
        var before, current, after;

        if (this._caretPos < 0) {
          before = this._input;
          current = after = "";
        } else if (this._caretPos === this._input.length) {
          before = this._input;
          current = "\u00A0";
          after = "";
        } else {
          before = this._input.substring(0, this._caretPos);
          current = this._input.charAt(this._caretPos);
          after = this._input.substring(this._caretPos + 1, this._input.length);
        }

        this.promptDisplay.appendChild(document.createTextNode(before));
        promptCursor.appendChild(document.createTextNode(current));
        this.promptDisplay.appendChild(promptCursor);
        this.promptDisplay.appendChild(document.createTextNode(after));
      };

      REPLConsole.prototype.writeOutput = function(output) {
        var consoleMessage = document.createElement('pre');
        consoleMessage.className = "console-message";
        consoleMessage.innerHTML = escapeHTML(output);
        this.inner.appendChild(consoleMessage);
        this.newPromptBox();
        return consoleMessage;
      };

      REPLConsole.prototype.writeError = function(output) {
        var consoleMessage = this.writeOutput(output);
        addClass(consoleMessage, "error-message");
        return consoleMessage;
      };

      REPLConsole.prototype.onEnterKey = function() {
        var input = this._input;

        if(input != "" && input !== undefined) {
          this.commandStorage.addCommand(input);
        }

        this.commandHandle(input);
      };

      REPLConsole.prototype.onNavigateHistory = function(offset) {
        var command = this.commandStorage.navigate(offset) || "";
        this.setInput(command);
      };

      /**
       * Handle control keys like up, down, left, right.
       */
      REPLConsole.prototype.onKeyDown = function(ev) {
        switch (ev.keyCode) {
          case 13:
            // Enter key
            this.onEnterKey();
            ev.preventDefault();
            break;
          case 80:
            // Ctrl-P
            if (! ev.ctrlKey) break;
          case 38:
            // Up arrow
            this.onNavigateHistory(-1);
            ev.preventDefault();
            break;
          case 78:
            // Ctrl-N
            if (! ev.ctrlKey) break;
          case 40:
            // Down arrow
            this.onNavigateHistory(1);
            ev.preventDefault();
            break;
          case 37:
            // Left arrow
            var caretPos = this._caretPos > 0 ? this._caretPos - 1 : this._caretPos;
            this.setInput(this._input, caretPos);
            ev.preventDefault();
            break;
          case 39:
            // Right arrow
            var length = this._input.length;
            var caretPos = this._caretPos < length ? this._caretPos + 1 : this._caretPos;
            this.setInput(this._input, caretPos);
            ev.preventDefault();
            break;
          case 8:
            // Delete
            this.deleteAtCurrent();
            ev.preventDefault();
            break;
          default:
            break;
        }

        if (ev.ctrlKey || ev.metaKey) {
          // Set focus to our clipboard in case they hit the "v" key
          this.clipboard.focus();
          if (ev.keyCode == 86) {
            // Pasting to clipboard doesn't happen immediately,
            // so we have to wait for a while to get the pasted text.
            var _this = this;
            setTimeout(function() {
              _this.addToInput(_this.clipboard.value);
              _this.clipboard.value = "";
              _this.clipboard.blur();
            }, 10);
          }
        }

        ev.stopPropagation();
      };

      /**
       * Handle input key press.
       */
      REPLConsole.prototype.onKeyPress = function(ev) {
        // Only write to the console if it's a single key press.
        if (ev.ctrlKey || ev.metaKey) { return; }
        var keyCode = ev.keyCode || ev.which;
        this.insertAtCurrent(String.fromCharCode(keyCode));
        ev.stopPropagation();
        ev.preventDefault();
      };

      /**
       * Delete a character at the current position.
       */
      REPLConsole.prototype.deleteAtCurrent = function() {
        if (this._caretPos > 0) {
          var caretPos = this._caretPos - 1;
          var before = this._input.substring(0, caretPos);
          var after = this._input.substring(this._caretPos, this._input.length);
          this.setInput(before + after, caretPos);
        }
      };

      /**
       * Insert a character at the current position.
       */
      REPLConsole.prototype.insertAtCurrent = function(char) {
        var before = this._input.substring(0, this._caretPos);
        var after = this._input.substring(this._caretPos, this._input.length);
        this.setInput(before + char + after, this._caretPos + 1);
      };

      REPLConsole.prototype.scrollToBottom = function() {
        this.outer.scrollTop = this.outer.scrollHeight;
      };

      // Change the binding of the console
      REPLConsole.prototype.switchBindingTo = function(frameId, callback) {
        var url = this.getSessionUrl('trace');
        var params = "frame_id=" + encodeURIComponent(frameId);
        postRequest(url, params, callback);
      };

      /**
       * Install the console into the element with a specific ID.
       * Example: REPLConsole.installInto("target-id")
       */
      REPLConsole.installInto = function(id, options) {
        var consoleElement = document.getElementById(id);

        options = options || {};

        for (var prop in consoleElement.dataset) {
          options[prop] = options[prop] || consoleElement.dataset[prop];
        }

        var replConsole = new REPLConsole(options);
        replConsole.install(consoleElement);
        return replConsole;
      };

      // This is to store the latest single session, and the stored session
      // is updated by the REPLConsole#install() method.
      // It allows to operate the current session from the other scripts.
      REPLConsole.currentSession = null;

      // This line is for the Firefox Add-on, because it doesn't have XMLHttpRequest as default.
      // And so we need to require a module compatible with XMLHttpRequest from SDK.
      REPLConsole.XMLHttpRequest = typeof XMLHttpRequest === 'undefined' ? null : XMLHttpRequest;

      REPLConsole.request = function request(method, url, params, callback) {
        var xhr = new REPLConsole.XMLHttpRequest();

        xhr.open(method, url, true);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
        xhr.setRequestHeader("Accept", "application/vnd.web-console.v2");
        xhr.send(params);

        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4) {
            callback(xhr);
          }
        };
      };

      // DOM helpers
      function hasClass(el, className) {
        var regex = new RegExp('(?:^|\\s)' + className + '(?!\\S)', 'g');
        return el.className && el.className.match(regex);
      }

      function isNodeList(el) {
        return typeof el.length === 'number' &&
          typeof el.item === 'function';
      }

      function addClass(el, className) {
        if (isNodeList(el)) {
          for (var i = 0; i < el.length; ++ i) {
            addClass(el[i], className);
          }
        } else {
          el.className += " " + className;
        }
      }

      function removeClass(el, className) {
        var regex = new RegExp('(?:^|\\s)' + className + '(?!\\S)', 'g');
        el.className = el.className.replace(regex, '');
      }

      function removeAllChildren(el) {
        while (el.firstChild) {
          el.removeChild(el.firstChild);
        }
      }

      function findChild(el, className) {
        for (var i = 0; i < el.childNodes.length; ++ i) {
          if (hasClass(el.childNodes[i], className)) {
            return el.childNodes[i];
          }
        }
      }

      function escapeHTML(html) {
        return html
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;')
          .replace(/'/g, '&#x27;')
          .replace(/`/g, '&#x60;');
      }

      // XHR helpers
      function postRequest() {
        REPLConsole.request.apply(this, ["POST"].concat([].slice.call(arguments)));
      }

      function putRequest() {
        REPLConsole.request.apply(this, ["PUT"].concat([].slice.call(arguments)));
      }

      if (typeof exports === 'object') {
        exports.REPLConsole = REPLConsole;
      } else {
        window.REPLConsole = REPLConsole;
      }

      }).call(this);
      </script>

      <script type="text/javascript">
      (function() {
        REPLConsole.installInto('console');

      }).call(this);
      </script>


        <script type="text/javascript">
      (function() {
        // Try intercept traces links in Rails 4.2.
      var traceFrames = document.getElementsByClassName('trace-frames');
      var selectedFrame, currentSource = document.getElementById('frame-source-0');

      // Add click listeners for all stack frames
      for (var i = 0; i < traceFrames.length; i++) {
        traceFrames[i].addEventListener('click', function(e) {
          e.preventDefault();
          var target = e.target;
          var frameId = target.dataset.frameId;

          // Change the binding of the console.
          changeBinding(frameId, function() {
            if (selectedFrame) {
              selectedFrame.className = selectedFrame.className.replace("selected", "");
            }

            target.className += " selected";
            selectedFrame = target;
          });

          // Change the extracted source code
          changeSourceExtract(frameId);
        });
      }

      function changeBinding(frameId, callback) {
        REPLConsole.currentSession.switchBindingTo(frameId, callback);
      }

      function changeSourceExtract(frameId) {
        var el = document.getElementById('frame-source-' + frameId);
        if (currentSource && el) {
          currentSource.className += " hidden";
          el.className = el.className.replace(" hidden", "");
          currentSource = el;
        }
      }

      // Push the error page body upwards the size of the console.
      //
      // While, I wouldn't like to do that on every custom page (so I don't screw
      // user's layouts), I think a lot of developers want to see all of the content
      // on the default Rails error page.
      //
      // Since it's quite special as is now, being a bit more special in the name of
      // better user experience, won't hurt.
      document.addEventListener('DOMContentLoaded', function() {
        var consoleElement = document.getElementById('console');
        var resizerElement = consoleElement.getElementsByClassName('resizer')[0];
        var containerElement = document.getElementById('container');

        function setContainerElementBottomMargin(pixels) {
          containerElement.style.marginBottom = pixels + 'px';
        }

        var currentConsoleElementHeight = consoleElement.offsetHeight;
        setContainerElementBottomMargin(currentConsoleElementHeight);

        resizerElement.addEventListener('mousedown', function(event) {
          function recordConsoleElementHeight(event) {
            resizerElement.removeEventListener('mouseup', recordConsoleElementHeight);

            var currentConsoleElementHeight = consoleElement.offsetHeight;
            setContainerElementBottomMargin(currentConsoleElementHeight);
          }

          resizerElement.addEventListener('mouseup', recordConsoleElementHeight);
        });
      });

      }).call(this);
      </script>

      </body>
      </html>

      expected: "200"
           got: "500"

      (compared using ==)
       (RSpec::Expectations::ExpectationNotMetError)
      ./features/step_definitions/rest_steps.rb:16:in `/^a "([^"]*)" status code is returned$/'
      features/api/v0/ping.feature:8:in `Then a "200" status code is returned'
    And the response should be JSON:         # features/step_definitions/rest_steps.rb:23
      """
        { "message": "Pong" }
      """

  Scenario: Returning a text response        # features/api/v0/ping.feature:14
    Given: The API is running
    When the Accept Type is text/plain       # features/step_definitions/rest_steps.rb:6
    And the client requests GET /api/v0/ping # features/step_definitions/rest_steps.rb:10
    Then a "200" status code is returned     # features/step_definitions/rest_steps.rb:14
      <!DOCTYPE html>
      <html lang="en">
      <head>
        <meta charset="utf-8" />
        <title>Action Controller: Exception caught</title>
        <style>
          body {
            background-color: #FAFAFA;
            color: #333;
            margin: 0px;
          }

          body, p, ol, ul, td {
            font-family: helvetica, verdana, arial, sans-serif;
            font-size:   13px;
            line-height: 18px;
          }

          pre {
            font-size: 11px;
            white-space: pre-wrap;
          }

          pre.box {
            border: 1px solid #EEE;
            padding: 10px;
            margin: 0px;
            width: 958px;
          }

          header {
            color: #F0F0F0;
            background: #C52F24;
            padding: 0.5em 1.5em;
          }

          h1 {
            margin: 0.2em 0;
            line-height: 1.1em;
            font-size: 2em;
          }

          h2 {
            color: #C52F24;
            line-height: 25px;
          }

          .details {
            border: 1px solid #D0D0D0;
            border-radius: 4px;
            margin: 1em 0px;
            display: block;
            width: 978px;
          }

          .summary {
            padding: 8px 15px;
            border-bottom: 1px solid #D0D0D0;
            display: block;
          }

          .details pre {
            margin: 5px;
            border: none;
          }

          #container {
            box-sizing: border-box;
            width: 100%;
            padding: 0 1.5em;
          }

          .source * {
            margin: 0px;
            padding: 0px;
          }

          .source {
            border: 1px solid #D9D9D9;
            background: #ECECEC;
            width: 978px;
          }

          .source pre {
            padding: 10px 0px;
            border: none;
          }

          .source .data {
            font-size: 80%;
            overflow: auto;
            background-color: #FFF;
          }

          .info {
            padding: 0.5em;
          }

          .source .data .line_numbers {
            background-color: #ECECEC;
            color: #AAA;
            padding: 1em .5em;
            border-right: 1px solid #DDD;
            text-align: right;
          }

          .line {
            padding-left: 10px;
          }

          .line:hover {
            background-color: #F6F6F6;
          }

          .line.active {
            background-color: #FFCCCC;
          }

          .hidden {
            display: none;
          }

          a { color: #980905; }
          a:visited { color: #666; }
          a.trace-frames { color: #666; }
          a:hover { color: #C52F24; }
          a.trace-frames.selected { color: #C52F24 }

          
        </style>

        <script>
          var toggle = function(id) {
            var s = document.getElementById(id).style;
            s.display = s.display == 'none' ? 'block' : 'none';
            return false;
          }
          var show = function(id) {
            document.getElementById(id).style.display = 'block';
          }
          var hide = function(id) {
            document.getElementById(id).style.display = 'none';
          }
          var toggleTrace = function() {
            return toggle('blame_trace');
          }
          var toggleSessionDump = function() {
            return toggle('session_dump');
          }
          var toggleEnvDump = function() {
            return toggle('env_dump');
          }
        </script>
      </head>
      <body>

      <header>
        <h1>
          ActiveRecord::PendingMigrationError
        </h1>
      </header>

      <div id="container">
        <h2>

      Migrations are pending. To resolve this issue, run:

      	bin/rake db:migrate RAILS_ENV=development

      </h2>

            <div class="source " id="frame-source-0">
            <div class="info">
              Extracted source (around line <strong>#392</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>390</span>
      <span>391</span>
      <span>392</span>
      <span>393</span>
      <span>394</span>
      <span>395</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">      def check_pending!(connection = Base.connection)
      </div><div class="line active">        raise ActiveRecord::PendingMigrationError if ActiveRecord::Migrator.needs_migration?(connection)
      </div><div class="line">      end
      </div><div class="line">
      </div><div class="line">      def load_schema_if_pending!
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-1">
            <div class="info">
              Extracted source (around line <strong>#373</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>371</span>
      <span>372</span>
      <span>373</span>
      <span>374</span>
      <span>375</span>
      <span>376</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">          mtime = ActiveRecord::Migrator.last_migration.mtime.to_i
      </div><div class="line">          if @last_check &lt; mtime
      </div><div class="line active">            ActiveRecord::Migration.check_pending!(connection)
      </div><div class="line">            @last_check = mtime
      </div><div class="line">          end
      </div><div class="line">        end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-2">
            <div class="info">
              Extracted source (around line <strong>#29</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>27</span>
      <span>28</span>
      <span>29</span>
      <span>30</span>
      <span>31</span>
      <span>32</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">      result = run_callbacks :call do
      </div><div class="line">        begin
      </div><div class="line active">          @app.call(env)
      </div><div class="line">        rescue =&gt; error
      </div><div class="line">        end
      </div><div class="line">      end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-3">
            <div class="info">
              Extracted source (around line <strong>#88</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>86</span>
      <span>87</span>
      <span>88</span>
      <span>89</span>
      <span>90</span>
      <span>91</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    def __run_callbacks__(callbacks, &amp;block)
      </div><div class="line">      if callbacks.empty?
      </div><div class="line active">        yield if block_given?
      </div><div class="line">      else
      </div><div class="line">        runner = callbacks.compile
      </div><div class="line">        e = Filters::Environment.new(self, false, nil, block)
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-4">
            <div class="info">
              Extracted source (around line <strong>#778</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>776</span>
      <span>777</span>
      <span>778</span>
      <span>779</span>
      <span>780</span>
      <span>781</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">          module_eval &lt;&lt;-RUBY, __FILE__, __LINE__ + 1
      </div><div class="line">            def _run_#{name}_callbacks(&amp;block)
      </div><div class="line active">              __run_callbacks__(_#{name}_callbacks, &amp;block)
      </div><div class="line">            end
      </div><div class="line">          RUBY
      </div><div class="line">        end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-5">
            <div class="info">
              Extracted source (around line <strong>#81</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>79</span>
      <span>80</span>
      <span>81</span>
      <span>82</span>
      <span>83</span>
      <span>84</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    #   end
      </div><div class="line">    def run_callbacks(kind, &amp;block)
      </div><div class="line active">      send &quot;_run_#{kind}_callbacks&quot;, &amp;block
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    private
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-6">
            <div class="info">
              Extracted source (around line <strong>#27</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>25</span>
      <span>26</span>
      <span>27</span>
      <span>28</span>
      <span>29</span>
      <span>30</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    def call(env)
      </div><div class="line">      error = nil
      </div><div class="line active">      result = run_callbacks :call do
      </div><div class="line">        begin
      </div><div class="line">          @app.call(env)
      </div><div class="line">        rescue =&gt; error
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-7">
            <div class="info">
              Extracted source (around line <strong>#73</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>71</span>
      <span>72</span>
      <span>73</span>
      <span>74</span>
      <span>75</span>
      <span>76</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">      prepare!
      </div><div class="line">
      </div><div class="line active">      response = @app.call(env)
      </div><div class="line">      response[2] = ::Rack::BodyProxy.new(response[2]) { cleanup! }
      </div><div class="line">
      </div><div class="line">      response
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-8">
            <div class="info">
              Extracted source (around line <strong>#78</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>76</span>
      <span>77</span>
      <span>78</span>
      <span>79</span>
      <span>80</span>
      <span>81</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    def call(env)
      </div><div class="line">      env[&quot;action_dispatch.remote_ip&quot;] = GetIp.new(env, self)
      </div><div class="line active">      @app.call(env)
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    # The GetIp class exists as a way to defer processing of the request data
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-9">
            <div class="info">
              Extracted source (around line <strong>#17</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>15</span>
      <span>16</span>
      <span>17</span>
      <span>18</span>
      <span>19</span>
      <span>20</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def call(env)
      </div><div class="line active">      _, headers, body = response = @app.call(env)
      </div><div class="line">
      </div><div class="line">      if headers[&#39;X-Cascade&#39;] == &#39;pass&#39;
      </div><div class="line">        body.close if body.respond_to?(:close)
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-10">
            <div class="info">
              Extracted source (around line <strong>#28</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>26</span>
      <span>27</span>
      <span>28</span>
      <span>29</span>
      <span>30</span>
      <span>31</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">        end
      </div><div class="line">
      </div><div class="line active">        status, headers, body = @app.call(env)
      </div><div class="line">
      </div><div class="line">        if exception = env[&#39;web_console.exception&#39;]
      </div><div class="line">          session = Session.from_exception(exception)
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-11">
            <div class="info">
              Extracted source (around line <strong>#18</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>16</span>
      <span>17</span>
      <span>18</span>
      <span>19</span>
      <span>20</span>
      <span>21</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def call(env)
      </div><div class="line active">      app_exception = catch :app_exception do
      </div><div class="line">        request = create_regular_or_whiny_request(env)
      </div><div class="line">        return @app.call(env) unless request.from_whitelited_ip?
      </div><div class="line">
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-12">
            <div class="info">
              Extracted source (around line <strong>#18</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>16</span>
      <span>17</span>
      <span>18</span>
      <span>19</span>
      <span>20</span>
      <span>21</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def call(env)
      </div><div class="line active">      app_exception = catch :app_exception do
      </div><div class="line">        request = create_regular_or_whiny_request(env)
      </div><div class="line">        return @app.call(env) unless request.from_whitelited_ip?
      </div><div class="line">
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-13">
            <div class="info">
              Extracted source (around line <strong>#30</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>28</span>
      <span>29</span>
      <span>30</span>
      <span>31</span>
      <span>32</span>
      <span>33</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def call(env)
      </div><div class="line active">      @app.call(env)
      </div><div class="line">    rescue Exception =&gt; exception
      </div><div class="line">      if env[&#39;action_dispatch.show_exceptions&#39;] == false
      </div><div class="line">        raise exception
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-14">
            <div class="info">
              Extracted source (around line <strong>#38</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>36</span>
      <span>37</span>
      <span>38</span>
      <span>39</span>
      <span>40</span>
      <span>41</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">        instrumenter.start &#39;request.action_dispatch&#39;, request: request
      </div><div class="line">        logger.info { started_request_message(request) }
      </div><div class="line active">        resp = @app.call(env)
      </div><div class="line">        resp[2] = ::Rack::BodyProxy.new(resp[2]) { finish(request) }
      </div><div class="line">        resp
      </div><div class="line">      rescue Exception
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-15">
            <div class="info">
              Extracted source (around line <strong>#20</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>18</span>
      <span>19</span>
      <span>20</span>
      <span>21</span>
      <span>22</span>
      <span>23</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">        if logger.respond_to?(:tagged)
      </div><div class="line active">          logger.tagged(compute_tags(request)) { call_app(request, env) }
      </div><div class="line">        else
      </div><div class="line">          call_app(request, env)
      </div><div class="line">        end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-16">
            <div class="info">
              Extracted source (around line <strong>#68</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>66</span>
      <span>67</span>
      <span>68</span>
      <span>69</span>
      <span>70</span>
      <span>71</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def tagged(*tags)
      </div><div class="line active">      formatter.tagged(*tags) { yield self }
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    def flush
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-17">
            <div class="info">
              Extracted source (around line <strong>#26</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>24</span>
      <span>25</span>
      <span>26</span>
      <span>27</span>
      <span>28</span>
      <span>29</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">      def tagged(*tags)
      </div><div class="line">        new_tags = push_tags(*tags)
      </div><div class="line active">        yield self
      </div><div class="line">      ensure
      </div><div class="line">        pop_tags(new_tags.size)
      </div><div class="line">      end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-18">
            <div class="info">
              Extracted source (around line <strong>#68</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>66</span>
      <span>67</span>
      <span>68</span>
      <span>69</span>
      <span>70</span>
      <span>71</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def tagged(*tags)
      </div><div class="line active">      formatter.tagged(*tags) { yield self }
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    def flush
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-19">
            <div class="info">
              Extracted source (around line <strong>#20</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>18</span>
      <span>19</span>
      <span>20</span>
      <span>21</span>
      <span>22</span>
      <span>23</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">        if logger.respond_to?(:tagged)
      </div><div class="line active">          logger.tagged(compute_tags(request)) { call_app(request, env) }
      </div><div class="line">        else
      </div><div class="line">          call_app(request, env)
      </div><div class="line">        end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-20">
            <div class="info">
              Extracted source (around line <strong>#21</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>19</span>
      <span>20</span>
      <span>21</span>
      <span>22</span>
      <span>23</span>
      <span>24</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    def call(env)
      </div><div class="line">      env[&quot;action_dispatch.request_id&quot;] = external_request_id(env) || internal_request_id
      </div><div class="line active">      @app.call(env).tap { |_status, headers, _body| headers[&quot;X-Request-Id&quot;] = env[&quot;action_dispatch.request_id&quot;] }
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    private
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-21">
            <div class="info">
              Extracted source (around line <strong>#22</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>20</span>
      <span>21</span>
      <span>22</span>
      <span>23</span>
      <span>24</span>
      <span>25</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">      end
      </div><div class="line">
      </div><div class="line active">      @app.call(env)
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    def method_override(env)
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-22">
            <div class="info">
              Extracted source (around line <strong>#18</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>16</span>
      <span>17</span>
      <span>18</span>
      <span>19</span>
      <span>20</span>
      <span>21</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    def call(env)
      </div><div class="line">      start_time = clock_time
      </div><div class="line active">      status, headers, body = @app.call(env)
      </div><div class="line">      request_time = clock_time - start_time
      </div><div class="line">
      </div><div class="line">      if !headers.has_key?(@header_name)
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-23">
            <div class="info">
              Extracted source (around line <strong>#28</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>26</span>
      <span>27</span>
      <span>28</span>
      <span>29</span>
      <span>30</span>
      <span>31</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">          def call(env)
      </div><div class="line">            LocalCacheRegistry.set_cache_for(local_cache_key, LocalStore.new)
      </div><div class="line active">            response = @app.call(env)
      </div><div class="line">            response[2] = ::Rack::BodyProxy.new(response[2]) do
      </div><div class="line">              LocalCacheRegistry.set_cache_for(local_cache_key, nil)
      </div><div class="line">            end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-24">
            <div class="info">
              Extracted source (around line <strong>#17</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>15</span>
      <span>16</span>
      <span>17</span>
      <span>18</span>
      <span>19</span>
      <span>20</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">      old, env[FLAG] = env[FLAG], false
      </div><div class="line">      @mutex.lock
      </div><div class="line active">      response = @app.call(env)
      </div><div class="line">      body = BodyProxy.new(response[2]) { @mutex.unlock }
      </div><div class="line">      response[2] = body
      </div><div class="line">      response
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-25">
            <div class="info">
              Extracted source (around line <strong>#116</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>114</span>
      <span>115</span>
      <span>116</span>
      <span>117</span>
      <span>118</span>
      <span>119</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">      end
      </div><div class="line">
      </div><div class="line active">      @app.call(env)
      </div><div class="line">    end
      </div><div class="line">  end
      </div><div class="line">end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-26">
            <div class="info">
              Extracted source (around line <strong>#113</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>111</span>
      <span>112</span>
      <span>113</span>
      <span>114</span>
      <span>115</span>
      <span>116</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def call(env)
      </div><div class="line active">      status, headers, body = @app.call(env)
      </div><div class="line">      if body.respond_to?(:to_path)
      </div><div class="line">        case type = variation(env)
      </div><div class="line">        when &#39;X-Accel-Redirect&#39;
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-27">
            <div class="info">
              Extracted source (around line <strong>#518</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>516</span>
      <span>517</span>
      <span>518</span>
      <span>519</span>
      <span>520</span>
      <span>521</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">        env[&quot;ROUTES_#{routes.object_id}_SCRIPT_NAME&quot;] = env[&#39;SCRIPT_NAME&#39;].dup
      </div><div class="line">      end
      </div><div class="line active">      app.call(env)
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    # Defines additional Rack env configuration that is added on each call.
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-28">
            <div class="info">
              Extracted source (around line <strong>#165</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>163</span>
      <span>164</span>
      <span>165</span>
      <span>166</span>
      <span>167</span>
      <span>168</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">      env[&quot;ORIGINAL_FULLPATH&quot;] = build_original_fullpath(env)
      </div><div class="line">      env[&quot;ORIGINAL_SCRIPT_NAME&quot;] = env[&quot;SCRIPT_NAME&quot;]
      </div><div class="line active">      super(env)
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    # Reload application routes regardless if they changed or not.
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-29">
            <div class="info">
              Extracted source (around line <strong>#15</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>13</span>
      <span>14</span>
      <span>15</span>
      <span>16</span>
      <span>17</span>
      <span>18</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    def call(env)
      </div><div class="line">      env[&#39;rack.tempfiles&#39;] ||= []
      </div><div class="line active">      status, headers, body = @app.call(env)
      </div><div class="line">      body_proxy = BodyProxy.new(body) do
      </div><div class="line">        env[&#39;rack.tempfiles&#39;].each { |f| f.close! } unless env[&#39;rack.tempfiles&#39;].nil?
      </div><div class="line">      end
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-30">
            <div class="info">
              Extracted source (around line <strong>#49</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>47</span>
      <span>48</span>
      <span>49</span>
      <span>50</span>
      <span>51</span>
      <span>52</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">      ## and returns an Array of exactly three values:
      </div><div class="line active">      status, headers, @body = @app.call(env)
      </div><div class="line">      ## The *status*,
      </div><div class="line">      check_status status
      </div><div class="line">      ## the *headers*,
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-31">
            <div class="info">
              Extracted source (around line <strong>#37</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>35</span>
      <span>36</span>
      <span>37</span>
      <span>38</span>
      <span>39</span>
      <span>40</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    ## responds to +call+.
      </div><div class="line">    def call(env=nil)
      </div><div class="line active">      dup._call(env)
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    def _call(env)
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-32">
            <div class="info">
              Extracted source (around line <strong>#24</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>22</span>
      <span>23</span>
      <span>24</span>
      <span>25</span>
      <span>26</span>
      <span>27</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def call(env)
      </div><div class="line active">      @app.call(env)
      </div><div class="line">    rescue StandardError, LoadError, SyntaxError =&gt; e
      </div><div class="line">      exception_string = dump_exception(e)
      </div><div class="line">
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-33">
            <div class="info">
              Extracted source (around line <strong>#33</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>31</span>
      <span>32</span>
      <span>33</span>
      <span>34</span>
      <span>35</span>
      <span>36</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">    def call(env)
      </div><div class="line">      began_at = Time.now
      </div><div class="line active">      status, header, body = @app.call(env)
      </div><div class="line">      header = Utils::HeaderHash.new(header)
      </div><div class="line">      body = BodyProxy.new(body) { log(env, status, header, began_at) }
      </div><div class="line">      [status, header, body]
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-34">
            <div class="info">
              Extracted source (around line <strong>#54</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>52</span>
      <span>53</span>
      <span>54</span>
      <span>55</span>
      <span>56</span>
      <span>57</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def call(env)
      </div><div class="line active">      status, headers, body = @app.call(env)
      </div><div class="line">      headers = HeaderHash.new(headers)
      </div><div class="line">
      </div><div class="line">      if ! chunkable_version?(env[&#39;HTTP_VERSION&#39;]) ||
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-35">
            <div class="info">
              Extracted source (around line <strong>#15</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>13</span>
      <span>14</span>
      <span>15</span>
      <span>16</span>
      <span>17</span>
      <span>18</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">
      </div><div class="line">    def call(env)
      </div><div class="line active">      status, headers, body = @app.call(env)
      </div><div class="line">      headers = HeaderHash.new(headers)
      </div><div class="line">
      </div><div class="line">      if !STATUS_WITH_NO_ENTITY_BODY.include?(status.to_i) &amp;&amp;
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-36">
            <div class="info">
              Extracted source (around line <strong>#88</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>86</span>
      <span>87</span>
      <span>88</span>
      <span>89</span>
      <span>90</span>
      <span>91</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">        env[&quot;REQUEST_PATH&quot;] ||= [env[&quot;SCRIPT_NAME&quot;], env[PATH_INFO]].join
      </div><div class="line">
      </div><div class="line active">        status, headers, body = @app.call(env)
      </div><div class="line">        begin
      </div><div class="line">          res.status = status.to_i
      </div><div class="line">          headers.each { |k, vs|
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-37">
            <div class="info">
              Extracted source (around line <strong>#140</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>138</span>
      <span>139</span>
      <span>140</span>
      <span>141</span>
      <span>142</span>
      <span>143</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">      si = servlet.get_instance(self, *options)
      </div><div class="line">      @logger.debug(format(&quot;%s is invoked.&quot;, si.class.name))
      </div><div class="line active">      si.service(req, res)
      </div><div class="line">    end
      </div><div class="line">
      </div><div class="line">    ##
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-38">
            <div class="info">
              Extracted source (around line <strong>#96</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>94</span>
      <span>95</span>
      <span>96</span>
      <span>97</span>
      <span>98</span>
      <span>99</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">            callback.call(req, res)
      </div><div class="line">          end
      </div><div class="line active">          server.service(req, res)
      </div><div class="line">        rescue HTTPStatus::EOFError, HTTPStatus::RequestTimeout =&gt; ex
      </div><div class="line">          res.set_error(ex)
      </div><div class="line">        rescue HTTPStatus::Error =&gt; ex
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>
          <div class="source hidden" id="frame-source-39">
            <div class="info">
              Extracted source (around line <strong>#296</strong>):
            </div>
            <div class="data">
              <table cellpadding="0" cellspacing="0" class="lines">
                <tr>
                  <td>
                    <pre class="line_numbers">
      <span>294</span>
      <span>295</span>
      <span>296</span>
      <span>297</span>
      <span>298</span>
      <span>299</span>
                    </pre>
                  </td>
      <td width="100%">
      <pre>
      <div class="line">          end
      </div><div class="line">          call_callback(:AcceptCallback, sock)
      </div><div class="line active">          block ? block.call(sock) : run(sock)
      </div><div class="line">        rescue Errno::ENOTCONN
      </div><div class="line">          @logger.debug &quot;Errno::ENOTCONN raised&quot;
      </div><div class="line">        rescue ServerError =&gt; ex
      </div>
      </pre>
      </td>
                </tr>
              </table>
            </div>
          </div>

        
      <p><code>Rails.root: /Users/tony/OneDrive/Documents/Development/refugee/project_unify</code></p>

      <div id="traces">
          <a href="#" onclick="hide(&#39;Framework-Trace&#39;);hide(&#39;Full-Trace&#39;);show(&#39;Application-Trace&#39;);; return false;">Application Trace</a> |
          <a href="#" onclick="hide(&#39;Application-Trace&#39;);hide(&#39;Full-Trace&#39;);show(&#39;Framework-Trace&#39;);; return false;">Framework Trace</a> |
          <a href="#" onclick="hide(&#39;Application-Trace&#39;);hide(&#39;Framework-Trace&#39;);show(&#39;Full-Trace&#39;);; return false;">Full Trace</a> 

          <div id="Application-Trace" style="display: none;">
            <pre><code></code></pre>
          </div>
          <div id="Framework-Trace" style="display: none;">
            <pre><code><a class="trace-frames" data-frame-id="0" href="#">activerecord (4.2.4) lib/active_record/migration.rb:392:in `check_pending!&#39;</a><br><a class="trace-frames" data-frame-id="1" href="#">activerecord (4.2.4) lib/active_record/migration.rb:373:in `call&#39;</a><br><a class="trace-frames" data-frame-id="2" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/callbacks.rb:29:in `block in call&#39;</a><br><a class="trace-frames" data-frame-id="3" href="#">activesupport (4.2.4) lib/active_support/callbacks.rb:88:in `__run_callbacks__&#39;</a><br><a class="trace-frames" data-frame-id="4" href="#">activesupport (4.2.4) lib/active_support/callbacks.rb:778:in `_run_call_callbacks&#39;</a><br><a class="trace-frames" data-frame-id="5" href="#">activesupport (4.2.4) lib/active_support/callbacks.rb:81:in `run_callbacks&#39;</a><br><a class="trace-frames" data-frame-id="6" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/callbacks.rb:27:in `call&#39;</a><br><a class="trace-frames" data-frame-id="7" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/reloader.rb:73:in `call&#39;</a><br><a class="trace-frames" data-frame-id="8" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/remote_ip.rb:78:in `call&#39;</a><br><a class="trace-frames" data-frame-id="9" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/debug_exceptions.rb:17:in `call&#39;</a><br><a class="trace-frames" data-frame-id="10" href="#">web-console (2.3.0) lib/web_console/middleware.rb:28:in `block in call&#39;</a><br><a class="trace-frames" data-frame-id="11" href="#">web-console (2.3.0) lib/web_console/middleware.rb:18:in `catch&#39;</a><br><a class="trace-frames" data-frame-id="12" href="#">web-console (2.3.0) lib/web_console/middleware.rb:18:in `call&#39;</a><br><a class="trace-frames" data-frame-id="13" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call&#39;</a><br><a class="trace-frames" data-frame-id="14" href="#">railties (4.2.4) lib/rails/rack/logger.rb:38:in `call_app&#39;</a><br><a class="trace-frames" data-frame-id="15" href="#">railties (4.2.4) lib/rails/rack/logger.rb:20:in `block in call&#39;</a><br><a class="trace-frames" data-frame-id="16" href="#">activesupport (4.2.4) lib/active_support/tagged_logging.rb:68:in `block in tagged&#39;</a><br><a class="trace-frames" data-frame-id="17" href="#">activesupport (4.2.4) lib/active_support/tagged_logging.rb:26:in `tagged&#39;</a><br><a class="trace-frames" data-frame-id="18" href="#">activesupport (4.2.4) lib/active_support/tagged_logging.rb:68:in `tagged&#39;</a><br><a class="trace-frames" data-frame-id="19" href="#">railties (4.2.4) lib/rails/rack/logger.rb:20:in `call&#39;</a><br><a class="trace-frames" data-frame-id="20" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/request_id.rb:21:in `call&#39;</a><br><a class="trace-frames" data-frame-id="21" href="#">rack (1.6.4) lib/rack/methodoverride.rb:22:in `call&#39;</a><br><a class="trace-frames" data-frame-id="22" href="#">rack (1.6.4) lib/rack/runtime.rb:18:in `call&#39;</a><br><a class="trace-frames" data-frame-id="23" href="#">activesupport (4.2.4) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call&#39;</a><br><a class="trace-frames" data-frame-id="24" href="#">rack (1.6.4) lib/rack/lock.rb:17:in `call&#39;</a><br><a class="trace-frames" data-frame-id="25" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/static.rb:116:in `call&#39;</a><br><a class="trace-frames" data-frame-id="26" href="#">rack (1.6.4) lib/rack/sendfile.rb:113:in `call&#39;</a><br><a class="trace-frames" data-frame-id="27" href="#">railties (4.2.4) lib/rails/engine.rb:518:in `call&#39;</a><br><a class="trace-frames" data-frame-id="28" href="#">railties (4.2.4) lib/rails/application.rb:165:in `call&#39;</a><br><a class="trace-frames" data-frame-id="29" href="#">rack (1.6.4) lib/rack/tempfile_reaper.rb:15:in `call&#39;</a><br><a class="trace-frames" data-frame-id="30" href="#">rack (1.6.4) lib/rack/lint.rb:49:in `_call&#39;</a><br><a class="trace-frames" data-frame-id="31" href="#">rack (1.6.4) lib/rack/lint.rb:37:in `call&#39;</a><br><a class="trace-frames" data-frame-id="32" href="#">rack (1.6.4) lib/rack/showexceptions.rb:24:in `call&#39;</a><br><a class="trace-frames" data-frame-id="33" href="#">rack (1.6.4) lib/rack/commonlogger.rb:33:in `call&#39;</a><br><a class="trace-frames" data-frame-id="34" href="#">rack (1.6.4) lib/rack/chunked.rb:54:in `call&#39;</a><br><a class="trace-frames" data-frame-id="35" href="#">rack (1.6.4) lib/rack/content_length.rb:15:in `call&#39;</a><br><a class="trace-frames" data-frame-id="36" href="#">rack (1.6.4) lib/rack/handler/webrick.rb:88:in `service&#39;</a><br><a class="trace-frames" data-frame-id="37" href="#">/Users/tony/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/webrick/httpserver.rb:140:in `service&#39;</a><br><a class="trace-frames" data-frame-id="38" href="#">/Users/tony/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/webrick/httpserver.rb:96:in `run&#39;</a><br><a class="trace-frames" data-frame-id="39" href="#">/Users/tony/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/webrick/server.rb:296:in `block in start_thread&#39;</a><br></code></pre>
          </div>
          <div id="Full-Trace" style="display: block;">
            <pre><code><a class="trace-frames" data-frame-id="0" href="#">activerecord (4.2.4) lib/active_record/migration.rb:392:in `check_pending!&#39;</a><br><a class="trace-frames" data-frame-id="1" href="#">activerecord (4.2.4) lib/active_record/migration.rb:373:in `call&#39;</a><br><a class="trace-frames" data-frame-id="2" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/callbacks.rb:29:in `block in call&#39;</a><br><a class="trace-frames" data-frame-id="3" href="#">activesupport (4.2.4) lib/active_support/callbacks.rb:88:in `__run_callbacks__&#39;</a><br><a class="trace-frames" data-frame-id="4" href="#">activesupport (4.2.4) lib/active_support/callbacks.rb:778:in `_run_call_callbacks&#39;</a><br><a class="trace-frames" data-frame-id="5" href="#">activesupport (4.2.4) lib/active_support/callbacks.rb:81:in `run_callbacks&#39;</a><br><a class="trace-frames" data-frame-id="6" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/callbacks.rb:27:in `call&#39;</a><br><a class="trace-frames" data-frame-id="7" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/reloader.rb:73:in `call&#39;</a><br><a class="trace-frames" data-frame-id="8" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/remote_ip.rb:78:in `call&#39;</a><br><a class="trace-frames" data-frame-id="9" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/debug_exceptions.rb:17:in `call&#39;</a><br><a class="trace-frames" data-frame-id="10" href="#">web-console (2.3.0) lib/web_console/middleware.rb:28:in `block in call&#39;</a><br><a class="trace-frames" data-frame-id="11" href="#">web-console (2.3.0) lib/web_console/middleware.rb:18:in `catch&#39;</a><br><a class="trace-frames" data-frame-id="12" href="#">web-console (2.3.0) lib/web_console/middleware.rb:18:in `call&#39;</a><br><a class="trace-frames" data-frame-id="13" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/show_exceptions.rb:30:in `call&#39;</a><br><a class="trace-frames" data-frame-id="14" href="#">railties (4.2.4) lib/rails/rack/logger.rb:38:in `call_app&#39;</a><br><a class="trace-frames" data-frame-id="15" href="#">railties (4.2.4) lib/rails/rack/logger.rb:20:in `block in call&#39;</a><br><a class="trace-frames" data-frame-id="16" href="#">activesupport (4.2.4) lib/active_support/tagged_logging.rb:68:in `block in tagged&#39;</a><br><a class="trace-frames" data-frame-id="17" href="#">activesupport (4.2.4) lib/active_support/tagged_logging.rb:26:in `tagged&#39;</a><br><a class="trace-frames" data-frame-id="18" href="#">activesupport (4.2.4) lib/active_support/tagged_logging.rb:68:in `tagged&#39;</a><br><a class="trace-frames" data-frame-id="19" href="#">railties (4.2.4) lib/rails/rack/logger.rb:20:in `call&#39;</a><br><a class="trace-frames" data-frame-id="20" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/request_id.rb:21:in `call&#39;</a><br><a class="trace-frames" data-frame-id="21" href="#">rack (1.6.4) lib/rack/methodoverride.rb:22:in `call&#39;</a><br><a class="trace-frames" data-frame-id="22" href="#">rack (1.6.4) lib/rack/runtime.rb:18:in `call&#39;</a><br><a class="trace-frames" data-frame-id="23" href="#">activesupport (4.2.4) lib/active_support/cache/strategy/local_cache_middleware.rb:28:in `call&#39;</a><br><a class="trace-frames" data-frame-id="24" href="#">rack (1.6.4) lib/rack/lock.rb:17:in `call&#39;</a><br><a class="trace-frames" data-frame-id="25" href="#">actionpack (4.2.4) lib/action_dispatch/middleware/static.rb:116:in `call&#39;</a><br><a class="trace-frames" data-frame-id="26" href="#">rack (1.6.4) lib/rack/sendfile.rb:113:in `call&#39;</a><br><a class="trace-frames" data-frame-id="27" href="#">railties (4.2.4) lib/rails/engine.rb:518:in `call&#39;</a><br><a class="trace-frames" data-frame-id="28" href="#">railties (4.2.4) lib/rails/application.rb:165:in `call&#39;</a><br><a class="trace-frames" data-frame-id="29" href="#">rack (1.6.4) lib/rack/tempfile_reaper.rb:15:in `call&#39;</a><br><a class="trace-frames" data-frame-id="30" href="#">rack (1.6.4) lib/rack/lint.rb:49:in `_call&#39;</a><br><a class="trace-frames" data-frame-id="31" href="#">rack (1.6.4) lib/rack/lint.rb:37:in `call&#39;</a><br><a class="trace-frames" data-frame-id="32" href="#">rack (1.6.4) lib/rack/showexceptions.rb:24:in `call&#39;</a><br><a class="trace-frames" data-frame-id="33" href="#">rack (1.6.4) lib/rack/commonlogger.rb:33:in `call&#39;</a><br><a class="trace-frames" data-frame-id="34" href="#">rack (1.6.4) lib/rack/chunked.rb:54:in `call&#39;</a><br><a class="trace-frames" data-frame-id="35" href="#">rack (1.6.4) lib/rack/content_length.rb:15:in `call&#39;</a><br><a class="trace-frames" data-frame-id="36" href="#">rack (1.6.4) lib/rack/handler/webrick.rb:88:in `service&#39;</a><br><a class="trace-frames" data-frame-id="37" href="#">/Users/tony/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/webrick/httpserver.rb:140:in `service&#39;</a><br><a class="trace-frames" data-frame-id="38" href="#">/Users/tony/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/webrick/httpserver.rb:96:in `run&#39;</a><br><a class="trace-frames" data-frame-id="39" href="#">/Users/tony/.rvm/rubies/ruby-2.3.0/lib/ruby/2.3.0/webrick/server.rb:296:in `block in start_thread&#39;</a><br></code></pre>
          </div>

        <script type="text/javascript">
          var traceFrames = document.getElementsByClassName('trace-frames');
          var selectedFrame, currentSource = document.getElementById('frame-source-0');

          // Add click listeners for all stack frames
          for (var i = 0; i < traceFrames.length; i++) {
            traceFrames[i].addEventListener('click', function(e) {
              e.preventDefault();
              var target = e.target;
              var frame_id = target.dataset.frameId;

              if (selectedFrame) {
                selectedFrame.className = selectedFrame.className.replace("selected", "");
              }

              target.className += " selected";
              selectedFrame = target;

              // Change the extracted source code
              changeSourceExtract(frame_id);
            });

            function changeSourceExtract(frame_id) {
              var el = document.getElementById('frame-source-' + frame_id);
              if (currentSource && el) {
                currentSource.className += " hidden";
                el.className = el.className.replace(" hidden", "");
                currentSource = el;
              }
            }
          }
        </script>
      </div>

        

      <h2 style="margin-top: 30px">Request</h2>
      <p><b>Parameters</b>:</p> <pre>None</pre>

      <div class="details">
        <div class="summary"><a href="#" onclick="return toggleSessionDump()">Toggle session dump</a></div>
        <div id="session_dump" style="display:none"><pre></pre></div>
      </div>

      <div class="details">
        <div class="summary"><a href="#" onclick="return toggleEnvDump()">Toggle env dump</a></div>
        <div id="env_dump" style="display:none"><pre>GATEWAY_INTERFACE: &quot;CGI/1.1&quot;
      HTTP_ACCEPT: &quot;text/plain&quot;
      REMOTE_ADDR: &quot;::1&quot;
      REMOTE_HOST: &quot;::1&quot;
      SERVER_NAME: &quot;localhost&quot;
      SERVER_PROTOCOL: &quot;HTTP/1.1&quot;</pre></div>
      </div>

      <h2 style="margin-top: 30px">Response</h2>
      <p><b>Headers</b>:</p> <pre>None</pre>

      </div>


      <div id="console"
        data-mount-point='/__web_console'
        data-session-id='1320fff1986200bb7ef027089e24684e'
        data-prompt-label='>> '>
      </div>


      <script type="text/javascript">
      (function() {
        /**
       * Constructor for command storage.
       * It uses localStorage if available. Otherwise fallback to normal JS array.
       */
      function CommandStorage() {
        this.previousCommands = [];
        var previousCommandOffset = 0;
        var hasLocalStorage = typeof window.localStorage !== 'undefined';
        var STORAGE_KEY = "web_console_previous_commands";
        var MAX_STORAGE = 100;

        if (hasLocalStorage) {
          this.previousCommands = JSON.parse(localStorage.getItem(STORAGE_KEY)) || [];
          previousCommandOffset = this.previousCommands.length;
        }

        this.addCommand = function(command) {
          previousCommandOffset = this.previousCommands.push(command);

          if (previousCommandOffset > MAX_STORAGE) {
            this.previousCommands.splice(0, 1);
            previousCommandOffset = MAX_STORAGE;
          }

          if (hasLocalStorage) {
            localStorage.setItem(STORAGE_KEY, JSON.stringify(this.previousCommands));
          }
        };

        this.navigate = function(offset) {
          previousCommandOffset += offset;

          if (previousCommandOffset < 0) {
            previousCommandOffset = -1;
            return null;
          }

          if (previousCommandOffset >= this.previousCommands.length) {
            previousCommandOffset = this.previousCommands.length;
            return null;
          }

          return this.previousCommands[previousCommandOffset];
        }
      }

      // HTML strings for dynamic elements.
      var consoleInnerHtml = "<div class=\'resizer layer\'><\/div>\n<div class=\'console-outer layer\'>\n  <div class=\'console-actions\'>\n    <div class=\'close-button button\' title=\'close\'>x<\/div>\n  <\/div>\n  <div class=\'console-inner\'><\/div>\n<\/div>\n<input class=\'clipboard\' type=\'text\'>\n"
      ;
      var promptBoxHtml = "<span class=\'console-prompt-label\'><\/span>\n<pre class=\'console-prompt-display\'><\/pre>\n"
      ;
      // CSS
      var consoleStyleCss = ".console .pos-absolute { position: absolute; }\n.console .pos-fixed { position: fixed; }\n.console .pos-right { right: 0; }\n.console .border-box { box-sizing: border-box; }\n.console .layer { width: 100%; height: 100%; }\n.console .layer.console-outer { z-index: 1; }\n.console .layer.resizer { z-index: 2; }\n.console { position: fixed; left: 0; bottom: 0; width: 100%; height: 148px; padding: 0; margin: 0; background: none repeat scroll 0% 0% #333; z-index: 9999; }\n.console .console-outer { overflow: auto; padding-top: 4px; }\n.console .console-inner { font-family: monospace; font-size: 11px; width: 100%; height: 100%; overflow: none; background: #333; }\n.console .console-prompt-box { color: #FFF; }\n.console .console-message { color: #1AD027; margin: 0; border: 0; white-space: pre-wrap; background-color: #333; padding: 0; }\n.console .console-message.error-message { color: #fc9; }\n.console .console-focus .console-cursor { background: #FEFEFE; color: #333; font-weight: bold; }\n.console .resizer { background: #333; width: 100%; height: 4px; cursor: ns-resize; }\n.console .console-actions { padding-right: 3px; }\n.console .console-actions .button { float: left; }\n.console .button { cursor: pointer; border-radius: 1px; font-family: monospace; font-size: 13px; width: 14px; height: 14px; line-height: 14px; text-align: center; color: #ccc; }\n.console .button:hover { background: #666; color: #fff; }\n.console .button.close-button:hover { background: #966; }\n.console .clipboard { height: 0px; padding: 0px; margin: 0px; width: 0px; margin-left: -1000px; }\n.console .console-prompt-label { display: inline; color: #FFF; background: none repeat scroll 0% 0% #333; border: 0; padding: 0; }\n.console .console-prompt-display { display: inline; color: #FFF; background: none repeat scroll 0% 0% #333; border: 0; padding: 0; }\n.console.full-screen { height: 100%; }\n.console.full-screen .console-outer { padding-top: 3px; }\n.console.full-screen .resizer { display: none; }\n.console.full-screen .close-button { display: none; }\n"
      ;
      // Insert a style element with the unique ID
      var styleElementId = 'sr02459pvbvrmhco';

      // REPLConsole Constructor
      function REPLConsole(config) {
        function getConfig(key, defaultValue) {
          return config && config[key] || defaultValue;
        }

        this.commandStorage = new CommandStorage();
        this.prompt = getConfig('promptLabel', ' >>');
        this.mountPoint = getConfig('mountPoint');
        this.sessionId = getConfig('sessionId');
      }

      REPLConsole.prototype.getSessionUrl = function(path) {
        var parts = [ this.mountPoint, 'repl_sessions', this.sessionId ];
        if (path) {
          parts.push(path);
        }
        // Join and remove duplicate slashes.
        return parts.join('/').replace(/([^:]\/)\/+/g, '$1');
      };

      REPLConsole.prototype.commandHandle = function(line, callback) {
        var self = this;
        var params = 'input=' + encodeURIComponent(line);
        callback = callback || function() {};

        function isSuccess(status) {
          return status >= 200 && status < 300 || status === 304;
        }

        function parseJSON(text) {
          try {
            return JSON.parse(text);
          } catch (e) {
            return null;
          }
        }

        function getErrorText(xhr) {
          if (!xhr.status) {
            return "Oops! Failed to connect to the Web Console middleware.\nPlease make sure a rails development server is running.\n";
          } else {
            return xhr.status + ' ' + xhr.statusText;
          }
        }

        putRequest(self.getSessionUrl(), params, function(xhr) {
          var response = parseJSON(xhr.responseText);
          var result   = isSuccess(xhr.status);
          if (result) {
            self.writeOutput(response.output);
          } else {
            if (response && response.output) {
              self.writeError(response.output);
            } else {
              self.writeError(getErrorText(xhr));
            }
          }
          callback(result, response);
        });
      };

      REPLConsole.prototype.uninstall = function() {
        this.container.parentNode.removeChild(this.container);
      };

      REPLConsole.prototype.install = function(container) {
        var _this = this;

        document.onkeydown = function(ev) {
          if (_this.focused) { _this.onKeyDown(ev); }
        };

        document.onkeypress = function(ev) {
          if (_this.focused) { _this.onKeyPress(ev); }
        };

        document.addEventListener('mousedown', function(ev) {
          var el = ev.target || ev.srcElement;

          if (el) {
            do {
              if (el === container) {
                _this.focus();
                return;
              }
            } while (el = el.parentNode);

            _this.blur();
          }
        });

        // Render the console.
        container.innerHTML = consoleInnerHtml;

        var consoleOuter = findChild(container, 'console-outer');
        var consoleActions = findChild(consoleOuter, 'console-actions');

        addClass(container, 'console');
        addClass(container.getElementsByClassName('layer'), 'pos-absolute border-box');
        addClass(container.getElementsByClassName('button'), 'border-box');
        addClass(consoleActions, 'pos-fixed pos-right');

        // Make the console resizable.
        function resizeContainer(ev) {
          var startY              = ev.clientY;
          var startHeight         = parseInt(document.defaultView.getComputedStyle(container).height, 10);
          var scrollTopStart      = consoleOuter.scrollTop;
          var clientHeightStart   = consoleOuter.clientHeight;

          var doDrag = function(e) {
            container.style.height = (startHeight + startY - e.clientY) + 'px';
            consoleOuter.scrollTop = scrollTopStart + (clientHeightStart - consoleOuter.clientHeight);
            shiftConsoleActions();
          };

          var stopDrag = function(e) {
            document.documentElement.removeEventListener('mousemove', doDrag, false);
            document.documentElement.removeEventListener('mouseup', stopDrag, false);
          };

          document.documentElement.addEventListener('mousemove', doDrag, false);
          document.documentElement.addEventListener('mouseup', stopDrag, false);
        }

        function closeContainer(ev) {
          container.parentNode.removeChild(container);
        }

        var shifted = false;
        function shiftConsoleActions() {
          if (consoleOuter.scrollHeight > consoleOuter.clientHeight) {
            var widthDiff = document.documentElement.clientWidth - consoleOuter.clientWidth;
            if (shifted || ! widthDiff) return;
            shifted = true;
            consoleActions.style.marginRight = widthDiff + 'px';
          } else if (shifted) {
            shifted = false;
            consoleActions.style.marginRight = '0px';
          }
        }

        // Initialize
        this.container = container;
        this.outer = consoleOuter;
        this.inner = findChild(this.outer, 'console-inner');
        this.clipboard = findChild(container, 'clipboard');
        this.newPromptBox();
        this.insertCss();

        findChild(container, 'resizer').addEventListener('mousedown', resizeContainer);
        findChild(consoleActions, 'close-button').addEventListener('click', closeContainer);
        consoleOuter.addEventListener('DOMNodeInserted', shiftConsoleActions);

        REPLConsole.currentSession = this;
      };

      // Add CSS styles dynamically. This probably doesnt work for IE <8.
      REPLConsole.prototype.insertCss = function() {
        if (document.getElementById(styleElementId)) {
          return; // already inserted
        }
        var style = document.createElement('style');
        style.type = 'text/css';
        style.innerHTML = consoleStyleCss;
        style.id = styleElementId;
        document.getElementsByTagName('head')[0].appendChild(style);
      };

      REPLConsole.prototype.focus = function() {
        if (! this.focused) {
          this.focused = true;
          if (! hasClass(this.inner, "console-focus")) {
            addClass(this.inner, "console-focus");
          }
          this.scrollToBottom();
        }
      };

      REPLConsole.prototype.blur = function() {
        this.focused = false;
        removeClass(this.inner, "console-focus");
      };

      /**
       * Add a new empty prompt box to the console.
       */
      REPLConsole.prototype.newPromptBox = function() {
        // Remove the caret from previous prompt display if any.
        if (this.promptDisplay) {
          this.removeCaretFromPrompt();
        }

        var promptBox = document.createElement('div');
        promptBox.className = "console-prompt-box";
        promptBox.innerHTML = promptBoxHtml;
        this.promptLabel = promptBox.getElementsByClassName('console-prompt-label')[0];
        this.promptDisplay = promptBox.getElementsByClassName('console-prompt-display')[0];
        // Render the prompt box
        this.setInput("");
        this.promptLabel.innerHTML = this.prompt;
        this.inner.appendChild(promptBox);
        this.scrollToBottom();
      };

      /**
       * Remove the caret from the prompt box,
       * mainly before adding a new prompt box.
       * For simplicity, just re-render the prompt box
       * with caret position -1.
       */
      REPLConsole.prototype.removeCaretFromPrompt = function() {
        this.setInput(this._input, -1);
      };

      REPLConsole.prototype.setInput = function(input, caretPos) {
        this._caretPos = caretPos === undefined ? input.length : caretPos;
        this._input = input;
        this.renderInput();
      };

      /**
       * Add some text to the existing input.
       */
      REPLConsole.prototype.addToInput = function(val, caretPos) {
        caretPos = caretPos || this._caretPos;
        var before = this._input.substring(0, caretPos);
        var after = this._input.substring(caretPos, this._input.length);
        var newInput =  before + val + after;
        this.setInput(newInput, caretPos + val.length);
      };

      /**
       * Render the input prompt. This is called whenever
       * the user input changes, sometimes not very efficient.
       */
      REPLConsole.prototype.renderInput = function() {
        // Clear the current input.
        removeAllChildren(this.promptDisplay);

        var promptCursor = document.createElement('span');
        promptCursor.className = "console-cursor";
        var before, current, after;

        if (this._caretPos < 0) {
          before = this._input;
          current = after = "";
        } else if (this._caretPos === this._input.length) {
          before = this._input;
          current = "\u00A0";
          after = "";
        } else {
          before = this._input.substring(0, this._caretPos);
          current = this._input.charAt(this._caretPos);
          after = this._input.substring(this._caretPos + 1, this._input.length);
        }

        this.promptDisplay.appendChild(document.createTextNode(before));
        promptCursor.appendChild(document.createTextNode(current));
        this.promptDisplay.appendChild(promptCursor);
        this.promptDisplay.appendChild(document.createTextNode(after));
      };

      REPLConsole.prototype.writeOutput = function(output) {
        var consoleMessage = document.createElement('pre');
        consoleMessage.className = "console-message";
        consoleMessage.innerHTML = escapeHTML(output);
        this.inner.appendChild(consoleMessage);
        this.newPromptBox();
        return consoleMessage;
      };

      REPLConsole.prototype.writeError = function(output) {
        var consoleMessage = this.writeOutput(output);
        addClass(consoleMessage, "error-message");
        return consoleMessage;
      };

      REPLConsole.prototype.onEnterKey = function() {
        var input = this._input;

        if(input != "" && input !== undefined) {
          this.commandStorage.addCommand(input);
        }

        this.commandHandle(input);
      };

      REPLConsole.prototype.onNavigateHistory = function(offset) {
        var command = this.commandStorage.navigate(offset) || "";
        this.setInput(command);
      };

      /**
       * Handle control keys like up, down, left, right.
       */
      REPLConsole.prototype.onKeyDown = function(ev) {
        switch (ev.keyCode) {
          case 13:
            // Enter key
            this.onEnterKey();
            ev.preventDefault();
            break;
          case 80:
            // Ctrl-P
            if (! ev.ctrlKey) break;
          case 38:
            // Up arrow
            this.onNavigateHistory(-1);
            ev.preventDefault();
            break;
          case 78:
            // Ctrl-N
            if (! ev.ctrlKey) break;
          case 40:
            // Down arrow
            this.onNavigateHistory(1);
            ev.preventDefault();
            break;
          case 37:
            // Left arrow
            var caretPos = this._caretPos > 0 ? this._caretPos - 1 : this._caretPos;
            this.setInput(this._input, caretPos);
            ev.preventDefault();
            break;
          case 39:
            // Right arrow
            var length = this._input.length;
            var caretPos = this._caretPos < length ? this._caretPos + 1 : this._caretPos;
            this.setInput(this._input, caretPos);
            ev.preventDefault();
            break;
          case 8:
            // Delete
            this.deleteAtCurrent();
            ev.preventDefault();
            break;
          default:
            break;
        }

        if (ev.ctrlKey || ev.metaKey) {
          // Set focus to our clipboard in case they hit the "v" key
          this.clipboard.focus();
          if (ev.keyCode == 86) {
            // Pasting to clipboard doesn't happen immediately,
            // so we have to wait for a while to get the pasted text.
            var _this = this;
            setTimeout(function() {
              _this.addToInput(_this.clipboard.value);
              _this.clipboard.value = "";
              _this.clipboard.blur();
            }, 10);
          }
        }

        ev.stopPropagation();
      };

      /**
       * Handle input key press.
       */
      REPLConsole.prototype.onKeyPress = function(ev) {
        // Only write to the console if it's a single key press.
        if (ev.ctrlKey || ev.metaKey) { return; }
        var keyCode = ev.keyCode || ev.which;
        this.insertAtCurrent(String.fromCharCode(keyCode));
        ev.stopPropagation();
        ev.preventDefault();
      };

      /**
       * Delete a character at the current position.
       */
      REPLConsole.prototype.deleteAtCurrent = function() {
        if (this._caretPos > 0) {
          var caretPos = this._caretPos - 1;
          var before = this._input.substring(0, caretPos);
          var after = this._input.substring(this._caretPos, this._input.length);
          this.setInput(before + after, caretPos);
        }
      };

      /**
       * Insert a character at the current position.
       */
      REPLConsole.prototype.insertAtCurrent = function(char) {
        var before = this._input.substring(0, this._caretPos);
        var after = this._input.substring(this._caretPos, this._input.length);
        this.setInput(before + char + after, this._caretPos + 1);
      };

      REPLConsole.prototype.scrollToBottom = function() {
        this.outer.scrollTop = this.outer.scrollHeight;
      };

      // Change the binding of the console
      REPLConsole.prototype.switchBindingTo = function(frameId, callback) {
        var url = this.getSessionUrl('trace');
        var params = "frame_id=" + encodeURIComponent(frameId);
        postRequest(url, params, callback);
      };

      /**
       * Install the console into the element with a specific ID.
       * Example: REPLConsole.installInto("target-id")
       */
      REPLConsole.installInto = function(id, options) {
        var consoleElement = document.getElementById(id);

        options = options || {};

        for (var prop in consoleElement.dataset) {
          options[prop] = options[prop] || consoleElement.dataset[prop];
        }

        var replConsole = new REPLConsole(options);
        replConsole.install(consoleElement);
        return replConsole;
      };

      // This is to store the latest single session, and the stored session
      // is updated by the REPLConsole#install() method.
      // It allows to operate the current session from the other scripts.
      REPLConsole.currentSession = null;

      // This line is for the Firefox Add-on, because it doesn't have XMLHttpRequest as default.
      // And so we need to require a module compatible with XMLHttpRequest from SDK.
      REPLConsole.XMLHttpRequest = typeof XMLHttpRequest === 'undefined' ? null : XMLHttpRequest;

      REPLConsole.request = function request(method, url, params, callback) {
        var xhr = new REPLConsole.XMLHttpRequest();

        xhr.open(method, url, true);
        xhr.setRequestHeader("Content-Type", "application/x-www-form-urlencoded");
        xhr.setRequestHeader("X-Requested-With", "XMLHttpRequest");
        xhr.setRequestHeader("Accept", "application/vnd.web-console.v2");
        xhr.send(params);

        xhr.onreadystatechange = function() {
          if (xhr.readyState === 4) {
            callback(xhr);
          }
        };
      };

      // DOM helpers
      function hasClass(el, className) {
        var regex = new RegExp('(?:^|\\s)' + className + '(?!\\S)', 'g');
        return el.className && el.className.match(regex);
      }

      function isNodeList(el) {
        return typeof el.length === 'number' &&
          typeof el.item === 'function';
      }

      function addClass(el, className) {
        if (isNodeList(el)) {
          for (var i = 0; i < el.length; ++ i) {
            addClass(el[i], className);
          }
        } else {
          el.className += " " + className;
        }
      }

      function removeClass(el, className) {
        var regex = new RegExp('(?:^|\\s)' + className + '(?!\\S)', 'g');
        el.className = el.className.replace(regex, '');
      }

      function removeAllChildren(el) {
        while (el.firstChild) {
          el.removeChild(el.firstChild);
        }
      }

      function findChild(el, className) {
        for (var i = 0; i < el.childNodes.length; ++ i) {
          if (hasClass(el.childNodes[i], className)) {
            return el.childNodes[i];
          }
        }
      }

      function escapeHTML(html) {
        return html
          .replace(/&/g, '&amp;')
          .replace(/</g, '&lt;')
          .replace(/>/g, '&gt;')
          .replace(/"/g, '&quot;')
          .replace(/'/g, '&#x27;')
          .replace(/`/g, '&#x60;');
      }

      // XHR helpers
      function postRequest() {
        REPLConsole.request.apply(this, ["POST"].concat([].slice.call(arguments)));
      }

      function putRequest() {
        REPLConsole.request.apply(this, ["PUT"].concat([].slice.call(arguments)));
      }

      if (typeof exports === 'object') {
        exports.REPLConsole = REPLConsole;
      } else {
        window.REPLConsole = REPLConsole;
      }

      }).call(this);
      </script>

      <script type="text/javascript">
      (function() {
        REPLConsole.installInto('console');

      }).call(this);
      </script>


        <script type="text/javascript">
      (function() {
        // Try intercept traces links in Rails 4.2.
      var traceFrames = document.getElementsByClassName('trace-frames');
      var selectedFrame, currentSource = document.getElementById('frame-source-0');

      // Add click listeners for all stack frames
      for (var i = 0; i < traceFrames.length; i++) {
        traceFrames[i].addEventListener('click', function(e) {
          e.preventDefault();
          var target = e.target;
          var frameId = target.dataset.frameId;

          // Change the binding of the console.
          changeBinding(frameId, function() {
            if (selectedFrame) {
              selectedFrame.className = selectedFrame.className.replace("selected", "");
            }

            target.className += " selected";
            selectedFrame = target;
          });

          // Change the extracted source code
          changeSourceExtract(frameId);
        });
      }

      function changeBinding(frameId, callback) {
        REPLConsole.currentSession.switchBindingTo(frameId, callback);
      }

      function changeSourceExtract(frameId) {
        var el = document.getElementById('frame-source-' + frameId);
        if (currentSource && el) {
          currentSource.className += " hidden";
          el.className = el.className.replace(" hidden", "");
          currentSource = el;
        }
      }

      // Push the error page body upwards the size of the console.
      //
      // While, I wouldn't like to do that on every custom page (so I don't screw
      // user's layouts), I think a lot of developers want to see all of the content
      // on the default Rails error page.
      //
      // Since it's quite special as is now, being a bit more special in the name of
      // better user experience, won't hurt.
      document.addEventListener('DOMContentLoaded', function() {
        var consoleElement = document.getElementById('console');
        var resizerElement = consoleElement.getElementsByClassName('resizer')[0];
        var containerElement = document.getElementById('container');

        function setContainerElementBottomMargin(pixels) {
          containerElement.style.marginBottom = pixels + 'px';
        }

        var currentConsoleElementHeight = consoleElement.offsetHeight;
        setContainerElementBottomMargin(currentConsoleElementHeight);

        resizerElement.addEventListener('mousedown', function(event) {
          function recordConsoleElementHeight(event) {
            resizerElement.removeEventListener('mouseup', recordConsoleElementHeight);

            var currentConsoleElementHeight = consoleElement.offsetHeight;
            setContainerElementBottomMargin(currentConsoleElementHeight);
          }

          resizerElement.addEventListener('mouseup', recordConsoleElementHeight);
        });
      });

      }).call(this);
      </script>

      </body>
      </html>

      expected: "200"
           got: "500"

      (compared using ==)
       (RSpec::Expectations::ExpectationNotMetError)
      ./features/step_definitions/rest_steps.rb:16:in `/^a "([^"]*)" status code is returned$/'
      features/api/v0/ping.feature:18:in `Then a "200" status code is returned'
    And the response should be: "Pong"       # features/step_definitions/rest_steps.rb:19

Failing Scenarios:
cucumber features/api/v0/ping.feature:4 # Scenario: Returning a JSON response
cucumber features/api/v0/ping.feature:14 # Scenario: Returning a text response

2 scenarios (2 failed)
8 steps (2 failed, 2 skipped, 4 passed)
0m0.639s
shutting down app on http://localhost:9999
